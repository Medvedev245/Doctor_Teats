{"version":3,"file":"static/js/867.c0a8175a.chunk.js","mappings":"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","sources":["components/Modal/Modal.styled.js","components/Modal/Modal.jsx","Pages/Tests/Tests.jsx","Pages/Tests/Tests.styled.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const ModalContainer = styled.div`\n  height: 100vh;\n  width: 100vw;\n  background-color: rgba(0, 0, 0, 0.7);\n  backdrop-filter: blur(5px);\n  position: fixed;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  top: 0;\n  left: 0;\n  overflow: hidden;\n`;\n\nexport const ModalContent = styled.div`\n  position: relative;\n  padding: 60px 15px 30px 15px;\n  border-radius: 12px;\n  background-color: var(--iq-secondary);\n  width: 75%;\n  height: 700px;\n  position: fixed; /* Фиксированная позиция */\n  overflow: auto; /* Разрешить прокрутку при необходимости */\n  @media screen and (max-width: 767px) {\n    padding: 60px 30px 30px 30px;\n    height: 550px;\n  }\n`;\n\nexport const SvgCloseBtn = styled.button`\n  position: absolute;\n  background: transparent;\n  border: none;\n  right: 14px;\n  top: 14px;\n  cursor: pointer;\n\n  svg {\n    stroke-width: 1.5px;\n    stroke: var(--iq-cross);\n    width: 20px;\n    height: 20px;\n  }\n`;\n\nexport const Text = styled.h2`\n  text-align: center;\n  margin-bottom: 15px;\n`;\n\nexport const Descr = styled.p`\n  margin-bottom: 40px;\n`;\n\nexport const Img = styled.img`\n  // Mobil\n  @media screen and (max-width: 767px) {\n    width: 235px;\n    height: 170px;\n  }\n`;\n","import React from 'react';\n\nimport {\n  Descr,\n  ModalContainer,\n  ModalContent,\n  SvgCloseBtn,\n  Text,\n  Img,\n} from './Modal.styled';\n\nconst Modal = ({ active, setActive, closeModal, props }) => {\n  return (\n    <>\n      {active && (\n        <ModalContainer onClick={() => closeModal(false)}>\n          <ModalContent onClick={e => e.stopPropagation()}>\n            <SvgCloseBtn type=\"button\" onClick={closeModal}>\n              <svg\n                xmlns=\"http://www.w3.org/2000/svg\"\n                // viewBox=\"0 0 24 24\"\n                fill=\"black\"\n                stroke=\"currentColor\"\n                strokeWidth=\"2\"\n                strokeLinecap=\"round\"\n                strokeLinejoin=\"round\"\n              >\n                <path d=\"M6 18L18 6M6 6l12 12\" />\n              </svg>\n            </SvgCloseBtn>\n\n            <Text>{props.question}</Text>\n            <Descr>{props.description}</Descr>\n            <Img src={props.img} alt={props.question} />\n          </ModalContent>\n        </ModalContainer>\n      )}\n    </>\n  );\n};\n\nexport default Modal;\n","import React, { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport {\n  FormTest,\n  FormText,\n  ContainerCheck,\n  Button,\n  LinkContainer,\n  LinkToPage,\n  AnswerControl,\n  AnswerBlock,\n  Answer,\n  ButtonDescr,\n} from './Tests.styled';\nimport Modal from '../../components/Modal/Modal';\n\nconst Tests = () => {\n  const [modalActive, setModalActive] = useState(false);\n  const [currentQuestion, setCurrentQuestion] = useState(0);\n  const [selectedAnswers, setSelectedAnswers] = useState([]);\n  const [correctCount, setCorrectCount] = useState(0);\n  const [count, setCount] = useState(1);\n  const [myCorrectAnswers, setMyCorrectAnswers] = useState([]); // Хранение правильных ответов\n  const [addColor, setAddColor] = useState(false); // Состояние для подсветки правильных ответов\n\n  const dispatch = useDispatch();\n  const questions = useSelector(state => state.testsReducer.questions);\n\n  const handleAnswerSelect = answer => {\n    if (selectedAnswers.includes(answer)) {\n      setSelectedAnswers(\n        selectedAnswers.filter(selected => selected !== answer)\n      );\n    } else {\n      setSelectedAnswers([...selectedAnswers, answer]);\n    }\n  };\n\n  const comparison = () => {\n    setAddColor(prevState => !prevState); // Изменяем состояние для подсветки при каждом нажатии\n  };\n\n  const handleNextQuestion = () => {\n    setAddColor(false);\n    setCount(count + 1);\n\n    let correctAnswersCount = 0;\n\n    questions[currentQuestion].correctAnswers.forEach(correctAnswer => {\n      if (selectedAnswers.includes(correctAnswer)) {\n        setMyCorrectAnswers(prevAnswers => [\n          ...prevAnswers,\n          {\n            topic: questions[currentQuestion].topic,\n            book: questions[currentQuestion].book,\n            answers: questions[currentQuestion].answers,\n            question: questions[currentQuestion].question,\n            correctAnswers: questions[currentQuestion].correctAnswers,\n          },\n        ]);\n        correctAnswersCount++;\n      }\n    });\n\n    setCorrectCount(\n      correctCount +\n        (correctAnswersCount ===\n        questions[currentQuestion].correctAnswers.length\n          ? 1\n          : 0)\n    );\n\n    if (currentQuestion < questions.length - 1) {\n      setCurrentQuestion(currentQuestion + 1);\n    } else {\n      if (count === questions.length) {\n        dispatch({\n          type: 'ADD_RIGHTQUESTIONS',\n          payload: { myCorrectAnswers },\n        });\n      }\n      console.log(correctCount);\n      // alert(`Правильных ответов - ${correctCount} из ${questions.length}`);\n    }\n\n    setSelectedAnswers([]);\n  };\n\n  const openModal = () => {\n    setModalActive(true);\n    document.body.style.overflow = 'hidden';\n  };\n\n  const closeModal = () => {\n    setModalActive(false);\n    document.body.style.overflow = 'auto';\n  };\n\n  // console.log(questions[currentQuestion].description);\n\n  return (\n    <FormTest>\n      <Answer>\n        <FormText>{questions[currentQuestion].question}</FormText>\n        {questions[currentQuestion].answers.map((answer, index) => (\n          <ContainerCheck\n            key={index}\n            style={{\n              backgroundColor:\n                addColor &&\n                questions[currentQuestion].correctAnswers.includes(answer)\n                  ? '#1fa01f6f'\n                  : '',\n            }}\n          >\n            <input\n              type=\"checkbox\"\n              checked={selectedAnswers.includes(answer)}\n              onChange={() => handleAnswerSelect(answer)}\n              style={{ width: '20px', height: '20px' }}\n            />\n            <label>{answer}</label>\n          </ContainerCheck>\n        ))}\n\n        {questions[currentQuestion].book &&\n        questions[currentQuestion].book[0] === 'Klener'\n          ? null\n          : questions[currentQuestion].description &&\n            questions[currentQuestion].description[0] !== '' && (\n              <ButtonDescr onClick={openModal}>Show Description</ButtonDescr>\n            )}\n      </Answer>\n\n      {count <= questions.length ? (\n        <AnswerBlock>\n          <AnswerControl>\n            <Button onClick={handleNextQuestion}>Next Question</Button>\n            <span>\n              {count} из {questions.length}\n            </span>\n          </AnswerControl>\n          <Button onClick={comparison}>Check</Button>\n        </AnswerBlock>\n      ) : (\n        <LinkContainer>\n          <h3>{`Правильных ответов - ${correctCount} из ${questions.length}`}</h3>\n          <LinkToPage to=\"/AnsweredQuestions\">\n            Перейти к разбору тестов\n          </LinkToPage>\n          <LinkToPage to=\"/\">На Главную</LinkToPage>\n        </LinkContainer>\n      )}\n      <Modal\n        active={modalActive}\n        setActive={setModalActive}\n        closeModal={closeModal}\n        props={questions[currentQuestion]}\n      />\n    </FormTest>\n  );\n};\n\nexport default Tests;\n","import styled from 'styled-components';\nimport { Link } from 'react-router-dom';\n\n//main container\nexport const FormTest = styled.div`\n  /* background-color: #abaad8; */\n`;\n\nexport const FormText = styled.h2`\n  margin-bottom: 40px;\n`;\n\nexport const ContainerCheck = styled.div`\n  display: flex;\n  align-items: center;\n  gap: 15px;\n  margin-bottom: 20px;\n`;\n\n// Общая кнопка\nexport const Button = styled.button`\n  margin-bottom: 15px;\n  color: black;\n  font-weight: 500;\n  background-color: var(--iq-primary);\n  width: 150px;\n  height: 50px;\n  border-radius: 10px;\n  transition: background-color 0.3s ease;\n  &:active {\n    background: var(--iq-secondary);\n  }\n`;\n\nexport const LinkContainer = styled.div`\n  margin-top: 50px;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  gap: 20px;\n`;\n\n// Общая ссылка\nexport const LinkToPage = styled(Link)`\n  border-radius: 4px;\n  text-decoration: none;\n  &:hover {\n    background: var(--iq-primary);\n  }\n`;\n\nexport const AnswerBlock = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  width: 400px;\n  margin-bottom: 30px;\n  margin: auto;\n\n  //Tablet\n  @media screen and (max-width: 1200px) {\n    font-size: var(--font-size-tablet);\n  }\n\n  //Mobil\n  @media screen and (max-width: 767px) {\n    font-size: var(--font-size-mobile);\n    display: flex;\n    flex-direction: column;\n    width: 270px;\n  }\n`;\n\nexport const AnswerControl = styled.div`\n  display: flex;\n  gap: 20px;\n  align-items: center;\n  margin-bottom: 20px;\n\n  //mobil\n  @media screen and (max-width: 767px) {\n    display: flex;\n    flex-direction: column;\n  }\n`;\n\nexport const Answer = styled.div`\n  min-height: 400px;\n  margin-bottom: 20px;\n`;\n\nexport const ButtonDescr = styled.button`\n  color: black;\n  font-weight: 500;\n  background-color: var(--iq-primary);\n  width: 200px;\n  height: 30px;\n  border-radius: 10px;\n  transition: background-color 0.3s ease;\n  display: block;\n  margin: auto;\n`;\n"],"names":["ModalContainer","styled","_templateObject","_taggedTemplateLiteral","ModalContent","_templateObject2","SvgCloseBtn","_templateObject3","Text","_templateObject4","Descr","_templateObject5","Img","_templateObject6","_ref","active","setActive","closeModal","props","_jsx","_Fragment","children","onClick","_jsxs","e","stopPropagation","type","xmlns","fill","stroke","strokeWidth","strokeLinecap","strokeLinejoin","d","question","description","src","img","alt","Tests","modalActive","setModalActive","useState","currentQuestion","setCurrentQuestion","selectedAnswers","setSelectedAnswers","correctCount","setCorrectCount","count","setCount","myCorrectAnswers","setMyCorrectAnswers","addColor","setAddColor","dispatch","useDispatch","questions","useSelector","state","testsReducer","FormTest","Answer","FormText","answers","map","answer","index","ContainerCheck","style","backgroundColor","correctAnswers","includes","checked","onChange","filter","selected","handleAnswerSelect","width","height","book","ButtonDescr","openModal","document","body","overflow","length","AnswerBlock","AnswerControl","Button","handleNextQuestion","correctAnswersCount","forEach","correctAnswer","prevAnswers","topic","payload","console","log","comparison","prevState","LinkContainer","concat","LinkToPage","to","Modal","Link","_templateObject7","_templateObject8","_templateObject9","_templateObject10"],"sourceRoot":""}