{"version":3,"file":"static/js/273.0ba27283.chunk.js","mappings":"q3HAuEA,EApEc,WACZ,IAAAA,GAA8CC,EAAAA,EAAAA,UAAS,GAAEC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAAlDI,EAAeF,EAAA,GAAEG,EAAkBH,EAAA,GAC1CI,GAA8CL,EAAAA,EAAAA,UAAS,IAAGM,GAAAJ,EAAAA,EAAAA,GAAAG,EAAA,GAAnDE,EAAeD,EAAA,GAAEE,EAAkBF,EAAA,GAC1CG,GAAwCT,EAAAA,EAAAA,UAAS,GAAEU,GAAAR,EAAAA,EAAAA,GAAAO,EAAA,GAA5CE,EAAYD,EAAA,GAAEE,EAAeF,EAAA,GA8CpC,OACEG,EAAAA,EAAAA,MAAA,OAAAC,SAAA,EACEC,EAAAA,EAAAA,KAAA,MAAAD,SAAKE,EAAUb,GAAiBc,WAC/BD,EAAUb,GAAiBe,QAAQC,KAAI,SAACC,EAAQC,GAAK,OACpDR,EAAAA,EAAAA,MAAA,OAAAC,SAAA,EACEC,EAAAA,EAAAA,KAAA,SACEO,KAAK,WACLC,QAAShB,EAAgBiB,SAASJ,GAClCK,SAAU,kBApDO,SAAAL,GACrBb,EAAgBiB,SAASJ,GAC3BZ,EACED,EAAgBmB,QAAO,SAAAC,GAAQ,OAAIA,IAAaP,CAAM,KAGxDZ,EAAmB,GAADoB,QAAAC,EAAAA,EAAAA,GAAKtB,GAAe,CAAEa,IAE5C,CA4C0BU,CAAmBV,EAAO,KAE5CL,EAAAA,EAAAA,KAAA,SAAAD,SAAQM,MANAC,EAOJ,KAGRN,EAAAA,EAAAA,KAAA,UAAQgB,QAhDe,WACzB,IAAIC,EAAsB,EAe1B,GAdAhB,EAAUb,GAAiB8B,eAAeC,SAAQ,SAAAC,GAC5C5B,EAAgBiB,SAASW,IAC3BH,GAEJ,IAEApB,EACED,GACGqB,IACDhB,EAAUb,GAAiB8B,eAAeG,OACtC,EACA,IAGJjC,EAAkBa,EAAAA,OAAmB,EACvCZ,EAAmBD,EAAkB,OAChC,CACL,IAAM8B,EAAiBjB,EAAAA,KAAc,SAAAC,GAAQ,OAC3CA,EAASgB,eAAeI,KAAK,KAAK,IAEpCC,MAAM,aAADV,OACUZ,EAAAA,KAET,SAACC,EAAUI,GAAK,SAAAO,OACXX,EAASA,SAAQ,uBAAAW,OAAsBK,EAAeZ,GAAM,IAElEgB,KAAK,QAAO,+BAAAT,OAA8BjB,GAEjD,CACAH,EAAmB,GACrB,EAgBwCM,SAAC,oBAG3C,C","sources":["Pages/Tests/Tests.jsx"],"sourcesContent":["import React, { useState } from 'react';\nimport questions from '../../Files/Clener.json';\n\nconst Tests = () => {\n  const [currentQuestion, setCurrentQuestion] = useState(0);\n  const [selectedAnswers, setSelectedAnswers] = useState([]);\n  const [correctCount, setCorrectCount] = useState(0);\n\n  const handleAnswerSelect = answer => {\n    if (selectedAnswers.includes(answer)) {\n      setSelectedAnswers(\n        selectedAnswers.filter(selected => selected !== answer)\n      );\n    } else {\n      setSelectedAnswers([...selectedAnswers, answer]);\n    }\n  };\n\n  const handleNextQuestion = () => {\n    let correctAnswersCount = 0;\n    questions[currentQuestion].correctAnswers.forEach(correctAnswer => {\n      if (selectedAnswers.includes(correctAnswer)) {\n        correctAnswersCount++;\n      }\n    });\n\n    setCorrectCount(\n      correctCount +\n        (correctAnswersCount ===\n        questions[currentQuestion].correctAnswers.length\n          ? 1\n          : 0)\n    );\n\n    if (currentQuestion < questions.length - 1) {\n      setCurrentQuestion(currentQuestion + 1);\n    } else {\n      const correctAnswers = questions.map(question =>\n        question.correctAnswers.join(', ')\n      );\n      alert(\n        `Results:\\n${questions\n          .map(\n            (question, index) =>\n              `${question.question}\\nCorrect answers: ${correctAnswers[index]}`\n          )\n          .join('\\n\\n')}\\n\\nTotal correct answers: ${correctCount}`\n      );\n    }\n    setSelectedAnswers([]);\n  };\n\n  return (\n    <div>\n      <h1>{questions[currentQuestion].question}</h1>\n      {questions[currentQuestion].answers.map((answer, index) => (\n        <div key={index}>\n          <input\n            type=\"checkbox\"\n            checked={selectedAnswers.includes(answer)}\n            onChange={() => handleAnswerSelect(answer)}\n          />\n          <label>{answer}</label>\n        </div>\n      ))}\n\n      <button onClick={handleNextQuestion}>Next Question</button>\n    </div>\n  );\n};\n\nexport default Tests;\n"],"names":["_useState","useState","_useState2","_slicedToArray","currentQuestion","setCurrentQuestion","_useState3","_useState4","selectedAnswers","setSelectedAnswers","_useState5","_useState6","correctCount","setCorrectCount","_jsxs","children","_jsx","questions","question","answers","map","answer","index","type","checked","includes","onChange","filter","selected","concat","_toConsumableArray","handleAnswerSelect","onClick","correctAnswersCount","correctAnswers","forEach","correctAnswer","length","join","alert"],"sourceRoot":""}