{"version":3,"file":"static/js/954.61a54e51.chunk.js","mappings":"qPAGaA,EAAWC,EAAAA,GAAAA,IAAUC,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,8CAIrBC,EAAWH,EAAAA,GAAAA,GAASI,IAAAA,GAAAF,EAAAA,EAAAA,GAAA,kCAIpBG,EAAiBL,EAAAA,GAAAA,IAAUM,IAAAA,GAAAJ,EAAAA,EAAAA,GAAA,0FAO3BK,EAASP,EAAAA,GAAAA,OAAaQ,IAAAA,GAAAN,EAAAA,EAAAA,GAAA,oI,SCsEnC,EApFc,WAEZ,IAAAO,GAA8CC,EAAAA,EAAAA,UAAS,GAAEC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAAlDI,EAAeF,EAAA,GAAEG,EAAkBH,EAAA,GAE1CI,GAA8CL,EAAAA,EAAAA,UAAS,IAAGM,GAAAJ,EAAAA,EAAAA,GAAAG,EAAA,GAAnDE,EAAeD,EAAA,GAAEE,EAAkBF,EAAA,GAC1CG,GAAwCT,EAAAA,EAAAA,UAAS,GAAEU,GAAAR,EAAAA,EAAAA,GAAAO,EAAA,GAA5CE,EAAYD,EAAA,GAAEE,EAAeF,EAAA,GACpCG,GAA0Bb,EAAAA,EAAAA,UAAS,GAAEc,GAAAZ,EAAAA,EAAAA,GAAAW,EAAA,GAA9BE,EAAKD,EAAA,GAAEE,EAAQF,EAAA,GAEhBG,GAAYC,EAAAA,EAAAA,KAAY,SAAAC,GAAK,OAAIA,EAAMF,SAAS,IAkDtD,OACEG,EAAAA,EAAAA,MAAC/B,EAAQ,CAAAgC,SAAA,EACPC,EAAAA,EAAAA,KAAC7B,EAAQ,CAAA4B,SAAEJ,EAAUd,GAAiBoB,WACrCN,EAAUd,GAAiBqB,QAAQC,KAAI,SAACC,EAAQC,GAAK,OACpDP,EAAAA,EAAAA,MAACzB,EAAc,CAAA0B,SAAA,EACbC,EAAAA,EAAAA,KAAA,SACEM,KAAK,WACLC,QAAStB,EAAgBuB,SAASJ,GAClCK,SAAU,kBAxDO,SAAAL,GACrBnB,EAAgBuB,SAASJ,GAC3BlB,EACED,EAAgByB,QAAO,SAAAC,GAAQ,OAAIA,IAAaP,CAAM,KAGxDlB,EAAmB,GAAD0B,QAAAC,EAAAA,EAAAA,GAAK5B,GAAe,CAAEmB,IAE5C,CAgD0BU,CAAmBV,EAAO,EAC1CW,MAAO,CACLC,MAAO,OACPC,OAAQ,WAGZjB,EAAAA,EAAAA,KAAA,SAAAD,SAAQK,MAVWC,EAWJ,KAGnBL,EAAAA,EAAAA,KAACzB,EAAM,CAAC2C,QAxDe,WACzBxB,EAASD,EAAQ,GACjB0B,QAAQC,IAAI3B,GACZ,IAAI4B,EAAsB,EAe1B,GAdA1B,EAAUd,GAAiByC,eAAeC,SAAQ,SAAAC,GAC5CvC,EAAgBuB,SAASgB,IAC3BH,GAEJ,IAEA/B,EACED,GACGgC,IACD1B,EAAUd,GAAiByC,eAAeG,OACtC,EACA,IAGJ5C,EAAkBc,EAAU8B,OAAS,EACvC3C,EAAmBD,EAAkB,OAChC,CACL,IAAMyC,EAAiB3B,EAAUQ,KAAI,SAAAF,GAAQ,OAC3CA,EAASqB,eAAeI,KAAK,KAAK,IAEpCP,QAAQC,IAAIE,GACZK,MAAM,6GAADf,OACqBvB,EAAY,kBAAAuB,OAAOjB,EAAU8B,QAQzD,CACAvC,EAAmB,GACrB,EAoBwCa,SAAC,mBACrCD,EAAAA,EAAAA,MAAA,OAAAC,SAAA,CACGN,EAAM,iBAAKE,EAAU8B,YAI9B,C","sources":["Pages/Tests/Tests.styled.js","Pages/Tests/Tests.jsx"],"sourcesContent":["import styled from 'styled-components';\n\n//main container\nexport const FormTest = styled.div`\n  /* background-color: #abaad8; */\n`;\n\nexport const FormText = styled.h2`\n  margin-bottom: 40px;\n`;\n\nexport const ContainerCheck = styled.div`\n  display: flex;\n  align-items: center;\n  gap: 10px;\n  margin-bottom: 20px;\n`;\n\nexport const Button = styled.button`\n  background-color: var(--iq-primary);\n  width: 150px;\n  height: 50px;\n  border-radius: 10px;\n  margin-bottom: 20px;\n`;\n","import React, { useState } from 'react';\nimport { useSelector } from 'react-redux';\nimport { FormTest, FormText, ContainerCheck, Button } from './Tests.styled';\n\nconst Tests = () => {\n  //правельные ответы\n  const [currentQuestion, setCurrentQuestion] = useState(0);\n  //выбранный ответ\n  const [selectedAnswers, setSelectedAnswers] = useState([]);\n  const [correctCount, setCorrectCount] = useState(0);\n  const [count, setCount] = useState(1);\n\n  const questions = useSelector(state => state.questions);\n\n  const handleAnswerSelect = answer => {\n    if (selectedAnswers.includes(answer)) {\n      setSelectedAnswers(\n        selectedAnswers.filter(selected => selected !== answer)\n      );\n    } else {\n      setSelectedAnswers([...selectedAnswers, answer]);\n    }\n  };\n\n  const handleNextQuestion = () => {\n    setCount(count + 1);\n    console.log(count);\n    let correctAnswersCount = 0;\n    questions[currentQuestion].correctAnswers.forEach(correctAnswer => {\n      if (selectedAnswers.includes(correctAnswer)) {\n        correctAnswersCount++;\n      }\n    });\n\n    setCorrectCount(\n      correctCount +\n        (correctAnswersCount ===\n        questions[currentQuestion].correctAnswers.length\n          ? 1\n          : 0)\n    );\n\n    if (currentQuestion < questions.length - 1) {\n      setCurrentQuestion(currentQuestion + 1);\n    } else {\n      const correctAnswers = questions.map(question =>\n        question.correctAnswers.join(', ')\n      );\n      console.log(correctAnswers);\n      alert(\n        `правильных ответов - ${correctCount} из ${questions.length}`\n        // `Results:\\n${questions\n        //   .map(\n        //     (question, index) =>\n        //       `${question.question}\\nCorrect answers: ${correctAnswers[index]}`\n        //   )\n        //   .join('\\n\\n')}\\n\\nTotal correct answers: ${correctCount}`\n      );\n    }\n    setSelectedAnswers([]);\n  };\n\n  return (\n    <FormTest>\n      <FormText>{questions[currentQuestion].question}</FormText>\n      {questions[currentQuestion].answers.map((answer, index) => (\n        <ContainerCheck key={index}>\n          <input\n            type=\"checkbox\"\n            checked={selectedAnswers.includes(answer)}\n            onChange={() => handleAnswerSelect(answer)}\n            style={{\n              width: '20px',\n              height: '20px',\n            }}\n          />\n          <label>{answer}</label>\n        </ContainerCheck>\n      ))}\n\n      <Button onClick={handleNextQuestion}>Next Question</Button>\n      <div>\n        {count} из {questions.length}\n      </div>\n    </FormTest>\n  );\n};\n\nexport default Tests;\n"],"names":["FormTest","styled","_templateObject","_taggedTemplateLiteral","FormText","_templateObject2","ContainerCheck","_templateObject3","Button","_templateObject4","_useState","useState","_useState2","_slicedToArray","currentQuestion","setCurrentQuestion","_useState3","_useState4","selectedAnswers","setSelectedAnswers","_useState5","_useState6","correctCount","setCorrectCount","_useState7","_useState8","count","setCount","questions","useSelector","state","_jsxs","children","_jsx","question","answers","map","answer","index","type","checked","includes","onChange","filter","selected","concat","_toConsumableArray","handleAnswerSelect","style","width","height","onClick","console","log","correctAnswersCount","correctAnswers","forEach","correctAnswer","length","join","alert"],"sourceRoot":""}