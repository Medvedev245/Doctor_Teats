{"version":3,"file":"static/js/3.41b3f4ed.chunk.js","mappings":"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","sources":["Pages/Tests/Tests.jsx","Pages/Tests/Tests.styled.js"],"sourcesContent":["import React, { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport {\n  FormTest,\n  FormText,\n  ContainerCheck,\n  Button,\n  LinkContainer,\n  LinkToPage,\n  AnswerControl,\n  AnswerBlock,\n} from './Tests.styled';\n\nconst Tests = () => {\n  const [currentQuestion, setCurrentQuestion] = useState(0);\n  const [selectedAnswers, setSelectedAnswers] = useState([]);\n  const [correctCount, setCorrectCount] = useState(0);\n  const [count, setCount] = useState(1);\n  const [myCorrectAnswers, setMyCorrectAnswers] = useState([]); // Хранение правильных ответов\n  const [addColor, setAddColor] = useState(false); // Состояние для подсветки правильных ответов\n\n  const dispatch = useDispatch();\n  const questions = useSelector(state => state.testsReducer.questions);\n\n  const handleAnswerSelect = answer => {\n    if (selectedAnswers.includes(answer)) {\n      setSelectedAnswers(\n        selectedAnswers.filter(selected => selected !== answer)\n      );\n    } else {\n      setSelectedAnswers([...selectedAnswers, answer]);\n    }\n  };\n\n  const comparison = () => {\n    setAddColor(prevState => !prevState); // Изменяем состояние для подсветки при каждом нажатии\n  };\n\n  const handleNextQuestion = () => {\n    setAddColor(false);\n    setCount(count + 1);\n\n    let correctAnswersCount = 0;\n\n    questions[currentQuestion].correctAnswers.forEach(correctAnswer => {\n      if (selectedAnswers.includes(correctAnswer)) {\n        setMyCorrectAnswers(prevAnswers => [\n          ...prevAnswers,\n          {\n            topic: questions[currentQuestion].topic,\n            book: questions[currentQuestion].book,\n            answers: questions[currentQuestion].answers,\n            question: questions[currentQuestion].question,\n            correctAnswers: questions[currentQuestion].correctAnswers,\n          },\n        ]);\n        correctAnswersCount++;\n      }\n    });\n\n    setCorrectCount(\n      correctCount +\n        (correctAnswersCount ===\n        questions[currentQuestion].correctAnswers.length\n          ? 1\n          : 0)\n    );\n\n    if (currentQuestion < questions.length - 1) {\n      setCurrentQuestion(currentQuestion + 1);\n    } else {\n      if (count === questions.length) {\n        dispatch({\n          type: 'ADD_RIGHTQUESTIONS',\n          payload: { myCorrectAnswers },\n        });\n      }\n\n      alert(`Правильных ответов - ${correctCount} из ${questions.length}`);\n    }\n\n    setSelectedAnswers([]);\n  };\n\n  return (\n    <FormTest>\n      <FormText>{questions[currentQuestion].question}</FormText>\n      {questions[currentQuestion].answers.map((answer, index) => (\n        <ContainerCheck\n          key={index}\n          style={{\n            backgroundColor:\n              addColor &&\n              questions[currentQuestion].correctAnswers.includes(answer)\n                ? '#1fa01f6f'\n                : '',\n          }}\n        >\n          <input\n            type=\"checkbox\"\n            checked={selectedAnswers.includes(answer)}\n            onChange={() => handleAnswerSelect(answer)}\n            style={{ width: '20px', height: '20px' }}\n          />\n          <label>{answer}</label>\n        </ContainerCheck>\n      ))}\n\n      {count <= questions.length ? (\n        <AnswerBlock>\n          <AnswerControl>\n            <Button onClick={handleNextQuestion}>Next Question</Button>\n            <span>\n              {count} из {questions.length}\n            </span>\n          </AnswerControl>\n          <Button onClick={comparison}>Check</Button>\n        </AnswerBlock>\n      ) : (\n        <LinkContainer>\n          <LinkToPage to=\"/AnsweredQuestions\">\n            Перейти к разбору тестов\n          </LinkToPage>\n          <LinkToPage to=\"/\">На Главную</LinkToPage>\n        </LinkContainer>\n      )}\n    </FormTest>\n  );\n};\n\nexport default Tests;\n","import styled from 'styled-components';\nimport { Link } from 'react-router-dom';\n\n//main container\nexport const FormTest = styled.div`\n  /* background-color: #abaad8; */\n`;\n\nexport const FormText = styled.h2`\n  margin-bottom: 40px;\n`;\n\nexport const ContainerCheck = styled.div`\n  display: flex;\n  align-items: center;\n  gap: 10px;\n  margin-bottom: 20px;\n`;\n\n// Общая кнопка\nexport const Button = styled.button`\n  color: black;\n  font-weight: 500;\n  background-color: var(--iq-primary);\n  width: 150px;\n  height: 50px;\n  border-radius: 10px;\n  /* margin-bottom: 20px; */\n  transition: background-color 0.3s ease;\n  &:active {\n    background: var(--iq-secondary);\n  }\n`;\n\nexport const LinkContainer = styled.div`\n  width: 200px;\n  margin-top: 50px;\n  display: flex;\n  flex-direction: column;\n  align-items: flex-start;\n  gap: 20px;\n`;\n\n// Общая ссылка\nexport const LinkToPage = styled(Link)`\n  border-radius: 4px;\n  text-decoration: none;\n  &:hover {\n    background: var(--iq-primary);\n  }\n`;\n\nexport const AnswerBlock = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n`;\n\nexport const AnswerControl = styled.div`\n  display: flex;\n  gap: 20px;\n  align-items: center;\n`;\n"],"names":["Tests","currentQuestion","setCurrentQuestion","useState","selectedAnswers","setSelectedAnswers","correctCount","setCorrectCount","count","setCount","myCorrectAnswers","setMyCorrectAnswers","addColor","setAddColor","dispatch","useDispatch","questions","useSelector","state","testsReducer","_jsxs","FormTest","children","_jsx","FormText","question","answers","map","answer","index","ContainerCheck","style","backgroundColor","correctAnswers","includes","type","checked","onChange","filter","selected","handleAnswerSelect","width","height","length","AnswerBlock","AnswerControl","Button","onClick","handleNextQuestion","correctAnswersCount","forEach","correctAnswer","prevAnswers","topic","book","payload","alert","concat","comparison","prevState","LinkContainer","LinkToPage","to","styled","_templateObject","_taggedTemplateLiteral","_templateObject2","_templateObject3","_templateObject4","_templateObject5","Link","_templateObject6","_templateObject7","_templateObject8"],"sourceRoot":""}