{"version":3,"file":"static/js/617.006fba1c.chunk.js","mappings":"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","sources":["components/Timer/Timer.jsx","Pages/Tests/Tests.jsx","Pages/Tests/Tests.styled.js","components/Modal/Modal.styled.js","components/Modal/Modal.jsx"],"sourcesContent":["import React from 'react';\nimport { useEffect } from 'react';\n\nconst Timer = props => {\n  const { time, setTime } = props;\n\n  useEffect(() => {\n    let interval = null;\n\n    interval = setInterval(() => {\n      setTime(prevTime => {\n        let seconds = prevTime.seconds + 1;\n        let minutes = prevTime.minutes;\n        if (seconds === 60) {\n          seconds = 0;\n          minutes += 1;\n        }\n        return { minutes, seconds };\n      });\n    }, 1000);\n\n    return () => clearInterval(interval);\n  });\n\n  return (\n    <div>\n      <h1>{`${time.minutes.toString().padStart(2, '0')}:${time.seconds\n        .toString()\n        .padStart(2, '0')}`}</h1>\n    </div>\n  );\n};\n\nexport default Timer;\n","import React, { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport {\n  FormTest,\n  FormText,\n  ContainerCheck,\n  Button,\n  LinkContainer,\n  LinkToPage,\n  AnswerControl,\n  AnswerBlock,\n  Answer,\n  ButtonDescr,\n} from './Tests.styled';\nimport Modal from '../../components/Modal/Modal';\nimport Timer from 'components/Timer/Timer';\n\nconst Tests = () => {\n  const [modalActive, setModalActive] = useState(false);\n  const [currentQuestion, setCurrentQuestion] = useState(0);\n  const [selectedAnswers, setSelectedAnswers] = useState([]);\n  const [correctCount, setCorrectCount] = useState(0);\n  const [count, setCount] = useState(1);\n  const [myCorrectAnswers, setMyCorrectAnswers] = useState([]); // Хранение правильных ответов\n  const [addColor, setAddColor] = useState(false); // Состояние для подсветки правильных ответов\n  const [time, setTime] = useState({ minutes: 0, seconds: 0 }); // состояние таймера\n\n  const dispatch = useDispatch();\n  const questions = useSelector(state => state.testsReducer.questions);\n\n  const handleAnswerSelect = answer => {\n    if (selectedAnswers.includes(answer)) {\n      setSelectedAnswers(\n        selectedAnswers.filter(selected => selected !== answer)\n      );\n    } else {\n      setSelectedAnswers([...selectedAnswers, answer]);\n    }\n  };\n\n  const comparison = () => {\n    setAddColor(prevState => !prevState); // Изменяем состояние для подсветки при каждом нажатии\n  };\n\n  const handleNextQuestion = () => {\n    setAddColor(false);\n    setCount(count + 1);\n\n    let correctAnswersCount = 0;\n\n    questions[currentQuestion].correctAnswers.forEach(correctAnswer => {\n      if (selectedAnswers.includes(correctAnswer)) {\n        setMyCorrectAnswers(prevAnswers => [\n          ...prevAnswers,\n          {\n            topic: questions[currentQuestion].topic,\n            book: questions[currentQuestion].book,\n            answers: questions[currentQuestion].answers,\n            question: questions[currentQuestion].question,\n            correctAnswers: questions[currentQuestion].correctAnswers,\n          },\n        ]);\n        correctAnswersCount++;\n      }\n    });\n\n    setCorrectCount(\n      correctCount +\n        (correctAnswersCount ===\n        questions[currentQuestion].correctAnswers.length\n          ? 1\n          : 0)\n    );\n\n    if (currentQuestion < questions.length - 1) {\n      setCurrentQuestion(currentQuestion + 1);\n    } else {\n      if (count === questions.length) {\n        dispatch({\n          type: 'ADD_RIGHTQUESTIONS',\n          payload: { myCorrectAnswers },\n        });\n      }\n      // console.log(correctCount);\n      // alert(`Правильных ответов - ${correctCount} из ${questions.length}`);\n    }\n\n    setSelectedAnswers([]);\n  };\n\n  const openModal = () => {\n    setModalActive(true);\n    document.body.style.overflow = 'hidden';\n  };\n\n  const closeModal = () => {\n    setModalActive(false);\n    document.body.style.overflow = 'auto';\n  };\n\n  // console.log(questions[currentQuestion].description);\n\n  return (\n    <FormTest>\n      <Answer>\n        <FormText>{questions[currentQuestion].question}</FormText>\n        {questions[currentQuestion].answers.map((answer, index) => (\n          <ContainerCheck\n            key={index}\n            style={{\n              backgroundColor:\n                addColor &&\n                questions[currentQuestion].correctAnswers.includes(answer)\n                  ? '#1fa01f6f'\n                  : '',\n            }}\n          >\n            <input\n              type=\"checkbox\"\n              checked={selectedAnswers.includes(answer)}\n              onChange={() => handleAnswerSelect(answer)}\n              style={{ width: '20px', height: '20px' }}\n            />\n            <label>{answer}</label>\n          </ContainerCheck>\n        ))}\n\n        {questions[currentQuestion].book &&\n        questions[currentQuestion].book[0] === 'Klener'\n          ? null\n          : questions[currentQuestion].description &&\n            questions[currentQuestion].description[0] !== '' && (\n              <ButtonDescr onClick={openModal}>Show Description</ButtonDescr>\n            )}\n      </Answer>\n\n      {count <= questions.length ? (\n        <AnswerBlock>\n          <Timer time={time} setTime={setTime} />\n          <AnswerControl>\n            <Button onClick={handleNextQuestion}>Next Question</Button>\n            <span style={{ width: '67px' }}>\n              {count} из {questions.length}\n            </span>\n            <Button onClick={comparison}>Check</Button>\n          </AnswerControl>\n        </AnswerBlock>\n      ) : (\n        <LinkContainer>\n          <h3>{`Correct answers - ${correctCount} из ${questions.length}`}</h3>\n          <h3>{`Testing time ${time.minutes} : ${time.seconds}`}</h3>\n          <LinkToPage to=\"/AnsweredQuestions\">\n            Перейти к разбору тестов\n          </LinkToPage>\n          <LinkToPage to=\"/\">На Главную</LinkToPage>\n        </LinkContainer>\n      )}\n      <Modal\n        active={modalActive}\n        setActive={setModalActive}\n        closeModal={closeModal}\n        props={questions[currentQuestion]}\n      />\n    </FormTest>\n  );\n};\n\nexport default Tests;\n","import styled from 'styled-components';\nimport { Link } from 'react-router-dom';\n\n//main container\nexport const FormTest = styled.div`\n  /* background-color: #abaad8; */\n`;\n\nexport const FormText = styled.h2`\n  margin-bottom: 40px;\n`;\n\nexport const ContainerCheck = styled.div`\n  display: flex;\n  align-items: center;\n  gap: 15px;\n  margin-bottom: 20px;\n`;\n\n// Общая кнопка\nexport const Button = styled.button`\n  /* margin-bottom: 15px; */\n  color: black;\n  font-weight: 500;\n  background-color: var(--iq-primary);\n  width: 150px;\n  height: 50px;\n  border-radius: 10px;\n  transition: background-color 0.3s ease;\n  &:active {\n    background: var(--iq-secondary);\n  }\n`;\n\nexport const LinkContainer = styled.div`\n  margin-top: 50px;\n  margin-bottom: 30px;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  gap: 20px;\n`;\n\n// Общая ссылка\nexport const LinkToPage = styled(Link)`\n  border-radius: 4px;\n  text-decoration: none;\n  &:hover {\n    background: var(--iq-primary);\n  }\n`;\n\nexport const AnswerBlock = styled.div`\n  gap: 20px;\n  display: flex;\n  flex-direction: column;\n  justify-content: space-between;\n  align-items: center;\n  /* width: 435px; */\n  margin-bottom: 30px;\n  margin: auto;\n\n  //Tablet\n  @media screen and (max-width: 1200px) {\n    font-size: var(--font-size-tablet);\n  }\n\n  //Mobil\n  @media screen and (max-width: 767px) {\n    font-size: var(--font-size-mobile);\n    display: flex;\n    flex-direction: column;\n    width: 270px;\n    margin-bottom: 200px;\n  }\n`;\n\nexport const AnswerControl = styled.div`\n  /* flex-direction: column; */\n  display: flex;\n  gap: 20px;\n  align-items: center;\n\n  //mobil\n  @media screen and (max-width: 767px) {\n    margin-bottom: 20px;\n    display: flex;\n    flex-direction: column;\n  }\n`;\n\nexport const Answer = styled.div`\n  min-height: 400px;\n  margin-bottom: 20px;\n`;\n\nexport const ButtonDescr = styled.button`\n  color: black;\n  font-weight: 500;\n  background-color: var(--iq-primary);\n  width: 200px;\n  height: 30px;\n  border-radius: 10px;\n  transition: background-color 0.3s ease;\n  display: block;\n  margin: auto;\n`;\n","import styled from 'styled-components';\n\nexport const ModalContainer = styled.div`\n  height: 100vh;\n  width: 100vw;\n  background-color: rgba(0, 0, 0, 0.7);\n  backdrop-filter: blur(5px);\n  position: fixed;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  top: 0;\n  left: 0;\n  overflow: hidden;\n`;\n\nexport const ModalContent = styled.div`\n  position: relative;\n  padding: 60px 15px 30px 15px;\n  border-radius: 12px;\n  background-color: var(--iq-secondary);\n  width: 75%;\n  height: 700px;\n  position: fixed; /* Фиксированная позиция */\n  overflow: auto; /* Разрешить прокрутку при необходимости */\n  @media screen and (max-width: 767px) {\n    padding: 60px 30px 30px 30px;\n    height: 550px;\n  }\n`;\n\nexport const SvgCloseBtn = styled.button`\n  position: absolute;\n  background: transparent;\n  border: none;\n  right: 14px;\n  top: 14px;\n  cursor: pointer;\n\n  svg {\n    stroke-width: 1.5px;\n    stroke: var(--iq-cross);\n    width: 20px;\n    height: 20px;\n  }\n`;\n\nexport const Text = styled.h2`\n  text-align: center;\n  margin-bottom: 15px;\n`;\n\nexport const Descr = styled.p`\n  margin-bottom: 40px;\n`;\n\nexport const Img = styled.img`\n  // Mobil\n  @media screen and (max-width: 767px) {\n    width: 235px;\n    height: 170px;\n  }\n`;\n","import React from 'react';\n\nimport {\n  Descr,\n  ModalContainer,\n  ModalContent,\n  SvgCloseBtn,\n  Text,\n  Img,\n} from './Modal.styled';\n\nconst Modal = ({ active, setActive, closeModal, props }) => {\n  return (\n    <>\n      {active && (\n        <ModalContainer onClick={() => closeModal(false)}>\n          <ModalContent onClick={e => e.stopPropagation()}>\n            <SvgCloseBtn type=\"button\" onClick={closeModal}>\n              <svg\n                xmlns=\"http://www.w3.org/2000/svg\"\n                // viewBox=\"0 0 24 24\"\n                fill=\"black\"\n                stroke=\"currentColor\"\n                strokeWidth=\"2\"\n                strokeLinecap=\"round\"\n                strokeLinejoin=\"round\"\n              >\n                <path d=\"M6 18L18 6M6 6l12 12\" />\n              </svg>\n            </SvgCloseBtn>\n\n            <Text>{props.question}</Text>\n            <Descr>{props.description}</Descr>\n            {props.img[0] && <Img src={props.img} alt={props.question} />}\n          </ModalContent>\n        </ModalContainer>\n      )}\n    </>\n  );\n};\n\nexport default Modal;\n"],"names":["props","time","setTime","useEffect","interval","setInterval","prevTime","seconds","minutes","clearInterval","_jsx","children","concat","toString","padStart","Tests","modalActive","setModalActive","useState","currentQuestion","setCurrentQuestion","selectedAnswers","setSelectedAnswers","correctCount","setCorrectCount","count","setCount","myCorrectAnswers","setMyCorrectAnswers","addColor","setAddColor","dispatch","useDispatch","questions","useSelector","state","testsReducer","_jsxs","FormTest","Answer","FormText","question","answers","map","answer","index","ContainerCheck","style","backgroundColor","correctAnswers","includes","type","checked","onChange","filter","selected","handleAnswerSelect","width","height","book","description","ButtonDescr","onClick","openModal","document","body","overflow","length","AnswerBlock","Timer","AnswerControl","Button","handleNextQuestion","correctAnswersCount","forEach","correctAnswer","prevAnswers","topic","payload","comparison","prevState","LinkContainer","LinkToPage","to","Modal","active","setActive","closeModal","styled","_templateObject","_taggedTemplateLiteral","_templateObject2","_templateObject3","_templateObject4","_templateObject5","Link","_templateObject6","_templateObject7","_templateObject8","_templateObject9","_templateObject10","ModalContainer","ModalContent","SvgCloseBtn","Text","Descr","Img","_ref","_Fragment","e","stopPropagation","xmlns","fill","stroke","strokeWidth","strokeLinecap","strokeLinejoin","d","img","src","alt"],"sourceRoot":""}