{"version":3,"file":"static/js/457.468b3e28.chunk.js","mappings":"sMAYA,MA0BA,EA1BoCA,IAAwB,IAAvB,KAAEC,EAAI,QAAEC,GAASF,EAiBpD,OAhBAG,EAAAA,EAAAA,YAAU,KACR,MAAMC,EAAWC,aAAY,KAC3BH,GAAQI,IACN,IAAIC,EAAUD,EAASC,QAAU,EAC7BC,EAAUF,EAASE,QAKvB,OAJgB,KAAZD,IACFA,EAAU,EACVC,GAAW,GAEN,CAAEA,UAASD,UAAS,GAC3B,GACD,KAEH,MAAO,IAAME,cAAcL,EAAS,GACnC,CAACF,KAGFQ,EAAAA,EAAAA,KAAA,OAAAC,UACED,EAAAA,EAAAA,KAAA,MAAAC,SAAA,GAAAC,OAAQX,EAAKO,QAAQK,WAAWC,SAAS,EAAG,KAAI,KAAAF,OAAIX,EAAKM,QACtDM,WACAC,SAAS,EAAG,SACX,E,mMC/BV,SAASC,EAAKC,G,IACZC,EAAAD,EAAAC,UACAC,EAAAF,EAAAE,iBACAC,EAAAH,EAAAG,UACAC,EAAAJ,EAAAI,WACAC,EAAAL,EAAAK,YACAC,EAAAN,EAAAM,MASA,OACEC,EAAAA,EAAAA,eAAA,QACEN,UAAWA,EACXK,MAAOE,OAAOC,OAAO,CAAC,EAAGH,EAAOI,EAAa,CAAEN,WAAUA,EAAED,UAASA,EAAED,iBAAgBA,KACtFS,EAAGC,EAAmB,CACpBR,WAAUA,EACVF,iBAAgBA,IAElBG,YAAaA,EACbQ,YAAa,GAGnB,CAGA,SAASD,EAAmBZ,G,IAC1BI,EAAAJ,EAAAI,WAOMU,EANNd,EAAAE,iBAMoC,EAAI,EAMxC,MAAO,+BAPQE,EASE,aATFA,EAUD,IAVCA,EAUS,IAAIU,EAAQ,UAAU,EAV/BV,EAUyC,aAVzCA,EAWD,IAXCA,EAWS,IAAIU,EAAQ,WAAW,EAXhCV,EAW0C,QAE3D,CAEA,SAASM,EAAaV,G,IACpBE,EAAAF,EAAAE,iBACAC,EAAAH,EAAAG,UACAC,EAAAJ,EAAAI,WAMMW,EAAqB,EAAVC,KAAKC,GAASb,EACzBc,GAAa,EAAIf,GAAaY,EAEpC,MAAO,CAELI,gBAAoBJ,EAAQ,MAAMA,EAAQ,KAE1CK,kBAAqBlB,GAAoBgB,EAAYA,GAAS,KAElE,CC7DA,IAAAG,EAAA,SAAAC,GAAA,SAAAD,I,+CA8GA,O,2HA9GkCE,CAAAF,EAAAC,GA2BhCD,EAAAG,UAAAC,qBAAA,WACE,OAAKC,KAAKC,MAAMC,WAITF,KAAKC,MAAME,kBAFT,C,EAKXR,EAAAG,UAAAM,cAAA,WAGE,OChD+B,GDgDFJ,KAAKC,MAAMtB,YAAc,EAAIqB,KAAKD,sB,EAIjEJ,EAAAG,UAAAO,aAAA,WACQ,IAAA/B,EAAA,KAAA2B,MAAEK,EAAAhC,EAAAgC,MAAOC,EAAAjC,EAAAiC,SAAUC,EAAAlC,EAAAkC,SAEzB,OADqBlB,KAAKmB,IAAInB,KAAKoB,IAAIJ,EAAOC,GAAWC,GAClCD,IAAaC,EAAWD,E,EAGjDZ,EAAAG,UAAAa,OAAA,WACQ,IAAArC,EAAA,KAAA2B,MACJW,EAAAtC,EAAAsC,YACArC,EAAAD,EAAAC,UACAsC,EAAAvC,EAAAuC,QACArC,EAAAF,EAAAE,iBACAsC,EAAAxC,EAAAwC,OACAnC,EAAAL,EAAAK,YACAoC,EAAAzC,EAAAyC,KAGIrC,EAAasB,KAAKI,gBAClBY,EAAYhB,KAAKK,eAEvB,OACExB,EAAAA,EAAAA,eAAA,OACEN,UAAcsC,EAAQI,KAAI,IAAI1C,EAC9BK,MAAOkC,EAAOG,KACdC,QAAS,cAAwC,eACpC,uBAEZlB,KAAKC,MAAMC,YACVrB,EAAAA,EAAAA,eAAA,UACEN,UAAWsC,EAAQX,WACnBtB,MAAOkC,EAAOZ,WACdiB,GClFoB,GDmFpBC,GClFoB,GDmFpBC,ECrFuB,KDuFvB,MAEJxC,EAAAA,EAAAA,eAACR,EAAI,CACHE,UAAWsC,EAAQS,MACnB9C,iBAAkBA,EAClBC,UAAWmC,EACXlC,WAAYA,EACZC,YAAaA,EACbC,MAAOkC,EAAOQ,SAGhBzC,EAAAA,EAAAA,eAACR,EAAI,CACHE,UAAWsC,EAAQU,KACnB/C,iBAAkBA,EAClBC,UAAWuC,EAAYJ,EACvBlC,WAAYA,EACZC,YAAaA,EACbC,MAAOkC,EAAOS,OAGfR,GACClC,EAAAA,EAAAA,eAAA,QACEN,UAAWsC,EAAQE,KACnBnC,MAAOkC,EAAOC,KACdS,EC9GoB,GD+GpBC,EC9GoB,IDgHnBV,GAED,K,EAzGHpB,EAAA+B,aAAgD,CACrDxB,YAAY,EACZC,kBAAmB,EACnBS,YAAa,EACbC,QAAS,CACPI,KAAM,sBACNK,MAAO,4BACPC,KAAM,2BACNR,KAAM,2BACNb,WAAY,kCAEd1B,kBAAkB,EAClBD,UAAW,GACXiC,SAAU,IACVD,SAAU,EACV5B,YAAa,EACbmC,OAAQ,CACNG,KAAM,CAAC,EACPK,MAAO,CAAC,EACRC,KAAM,CAAC,EACPR,KAAM,CAAC,EACPb,WAAY,CAAC,GAEfa,KAAM,IAsFVpB,C,CA9GA,CAAkCgC,EAAAA,W,eEV3B,MAAMC,E,QAAmBC,GAAAA,IAAUC,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,+LCQ7BC,EAA0C/B,IACrD,MAAM,aAAEgC,EAAY,UAAEC,GAAcjC,EAC9BkC,EAAmBA,IAChB7C,KAAK8C,MAAOH,EAAeC,EAAa,KAGjD,OADAG,QAAQC,IAAIL,EAAcC,IAExBlE,EAAAA,EAAAA,KAAAuE,EAAAA,SAAA,CAAAtE,UAEED,EAAAA,EAAAA,KAAC4D,EAAgB,CAAA3D,UACfD,EAAAA,EAAAA,KAAC2B,EAAmB,CAClBW,MAAO6B,IACPpB,KAAI,GAAA7C,OAAKiE,IAAkB,UAG9B,ECwKP,EA7KcK,KACZ,MAAOC,EAAaC,IAAkBC,EAAAA,EAAAA,WAAS,IACxCC,EAAiBC,IAAsBF,EAAAA,EAAAA,UAAS,IAChDG,EAAiBC,IAAsBJ,EAAAA,EAAAA,UAAS,KAChDV,EAAce,IAAmBL,EAAAA,EAAAA,UAAS,IAC1CM,EAAOC,IAAYP,EAAAA,EAAAA,UAAS,IAC5BQ,EAAkBC,IAAuBT,EAAAA,EAAAA,UAAS,KAClDU,EAAUC,IAAeX,EAAAA,EAAAA,WAAS,IAClCpF,EAAMC,IAAWmF,EAAAA,EAAAA,UAAS,CAAE7E,QAAS,EAAGD,QAAS,IASlD0F,GAAWC,EAAAA,EAAAA,MACXtB,GAAYuB,EAAAA,EAAAA,KAAYC,GAASA,EAAMC,MAAMzB,YAmFnD,OACE0B,EAAAA,EAAAA,MAACC,EAAAA,GAAQ,CAAA5F,SAAA,EACP2F,EAAAA,EAAAA,MAACE,EAAAA,GAAM,CAAA7F,SAAA,EACLD,EAAAA,EAAAA,KAAC+F,EAAAA,GAAQ,CAAA9F,SAAEiE,EAAUU,GAAiBoB,WACrC9B,EAAUU,GAAiBqB,QAAQC,KAAI,CAACC,EAAQC,KAC/CR,EAAAA,EAAAA,MAACS,EAAAA,GAAc,CAEbzF,MAAO,CACL0F,gBACEjB,GACAnB,EAAUU,GAAiB2B,eAAeC,SAASL,GAC/C,YACA,IACNlG,SAAA,EAEFD,EAAAA,EAAAA,KAAA,SACEyG,KAAK,WACLC,QAAS5B,EAAgB0B,SAASL,GAClCQ,SAAUA,IAnGKR,KACrBrB,EAAgB0B,SAASL,GAC3BpB,EACED,EAAgB8B,QAAOC,GAAYA,IAAaV,KAGlDpB,EAAmB,IAAID,EAAiBqB,GAC1C,EA4F0BW,CAAmBX,GACnCvF,MAAO,CAAEmG,MAAO,OAAQC,OAAQ,WAElChH,EAAAA,EAAAA,KAAA,SAAAC,SAAQkG,MAfHC,KAmBRlC,EAAUU,GAAiBqC,MACW,WAAvC/C,EAAUU,GAAiBqC,KAAK,GAC5B,KACA/C,EAAUU,GAAiBsC,aACmB,KAA9ChD,EAAUU,GAAiBsC,YAAY,KACrClH,EAAAA,EAAAA,KAACmH,EAAAA,GAAW,CAACC,QA1CPC,KAChB3C,GAAe,GACf4C,SAASC,KAAK3G,MAAM4G,SAAW,QAAQ,EAwCGvH,SAAC,wBAIxCgF,GAASf,EAAUuD,QAClB7B,EAAAA,EAAAA,MAAC8B,EAAAA,GAAW,CAAAzH,SAAA,EACVD,EAAAA,EAAAA,KAAC2H,EAAK,CAACpI,KAAMA,EAAMC,QAASA,KAC5BoG,EAAAA,EAAAA,MAACgC,EAAAA,GAAa,CAAA3H,SAAA,EACZD,EAAAA,EAAAA,KAAC6H,EAAAA,GAAM,CAACT,QAzGSU,KACzBxC,GAAY,GACZJ,EAASD,EAAQ,GAEjB,IAAI8C,EAAsB,EAE1B7D,EAAUU,GAAiB2B,eAAeyB,SAAQC,IAC5CnD,EAAgB0B,SAASyB,KAC3B7C,GAAoB8C,GAAe,IAC9BA,EACH,CACEC,MAAOjE,EAAUU,GAAiBuD,MAClClB,KAAM/C,EAAUU,GAAiBqC,KACjChB,QAAS/B,EAAUU,GAAiBqB,QACpCD,SAAU9B,EAAUU,GAAiBoB,SACrCO,eAAgBrC,EAAUU,GAAiB2B,mBAG/CwB,IACF,IAGF/C,EACEf,GACG8D,IACD7D,EAAUU,GAAiB2B,eAAekB,OACtC,EACA,IAGJ7C,EAAkBV,EAAUuD,OAAS,EACvC5C,EAAmBD,EAAkB,GAEjCK,IAAUf,EAAUuD,QACtBlC,GACE6C,EAAAA,EAAAA,IAAmB,CACjBjD,sBAYRJ,EAAmB,GAAG,EAyDsB9E,SAAC,mBACrC2F,EAAAA,EAAAA,MAAA,QAAMhF,MAAO,CAAEmG,MAAO,QAAS9G,SAAA,CAC5BgF,EAAM,iBAAKf,EAAUuD,WAExBzH,EAAAA,EAAAA,KAAC6H,EAAAA,GAAM,CAACT,QAjHCiB,KACjB/C,GAAYgD,IAAcA,GAAU,EAgHArI,SAAC,iBAIjC2F,EAAAA,EAAAA,MAAC2C,EAAAA,GAAa,CAAAtI,SAAA,EACZD,EAAAA,EAAAA,KAACgE,EAAW,CACVC,aAAcA,EACdC,UAAWA,EAAUuD,UAGvBzH,EAAAA,EAAAA,KAAA,MAAAC,SAAA,qBAAAC,OAA0B+D,EAAY,kBAAA/D,OAAOgE,EAAUuD,WACvDzH,EAAAA,EAAAA,KAAA,MAAAC,SAAA,gBAAAC,OAAqBX,EAAKO,QAAO,OAAAI,OAAMX,EAAKM,YAC5CG,EAAAA,EAAAA,KAACwI,EAAAA,GAAU,CAACC,GAAG,qBAAoBxI,SAAC,uIAGpCD,EAAAA,EAAAA,KAACwI,EAAAA,GAAU,CAACpB,QAzEDsB,KACjBnD,GAASoD,EAAAA,EAAAA,IAAY,CAAC,GAAG,EAwEcF,GAAG,IAAGxI,SAAC,gEAK5CD,EAAAA,EAAAA,KAAC4I,EAAAA,EAAK,CACJC,OAAQpE,EACRqE,UAAWpE,EACXqE,WAxEaA,KACjBrE,GAAe,GACf4C,SAASC,KAAK3G,MAAM4G,SAAW,MAAM,EAuEjCvF,MAAOiC,EAAUU,OAEV,C,yKCzLR,MAAMiB,EAAWhC,EAAAA,GAAAA,IAAUC,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,8CAIrBgC,EAAWlC,EAAAA,GAAAA,GAASmF,IAAAA,GAAAjF,EAAAA,EAAAA,GAAA,kCAIpBsC,EAAiBxC,EAAAA,GAAAA,IAAUoF,IAAAA,GAAAlF,EAAAA,EAAAA,GAAA,0FAQ3B8D,EAAShE,EAAAA,GAAAA,OAAaqF,IAAAA,GAAAnF,EAAAA,EAAAA,GAAA,oRActBwE,EAAgB1E,EAAAA,GAAAA,IAAUsF,IAAAA,GAAApF,EAAAA,EAAAA,GAAA,0IAU1ByE,GAAa3E,EAAAA,EAAAA,IAAOuF,EAAAA,GAAPvF,CAAYwF,IAAAA,GAAAtF,EAAAA,EAAAA,GAAA,iHAQzB2D,EAAc7D,EAAAA,GAAAA,IAAUyF,IAAAA,GAAAvF,EAAAA,EAAAA,GAAA,2eAyBxB6D,EAAgB/D,EAAAA,GAAAA,IAAU0F,IAAAA,GAAAxF,EAAAA,EAAAA,GAAA,0OAc1B+B,EAASjC,EAAAA,GAAAA,IAAU2F,IAAAA,GAAAzF,EAAAA,EAAAA,GAAA,wDAKnBoD,EAActD,EAAAA,GAAAA,OAAa4F,IAAAA,GAAA1F,EAAAA,EAAAA,GAAA,gO,6EC9FjC,MAAM2F,EAAiB7F,EAAAA,GAAAA,IAAUC,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,2PAc3B4F,EAAe9F,EAAAA,GAAAA,IAAUmF,IAAAA,GAAAjF,EAAAA,EAAAA,GAAA,woBAezB6F,EAAc/F,EAAAA,GAAAA,OAAaoF,IAAAA,GAAAlF,EAAAA,EAAAA,GAAA,6OAgB3B8F,EAAOhG,EAAAA,GAAAA,GAASqF,IAAAA,GAAAnF,EAAAA,EAAAA,GAAA,yDAKhB+F,EAAQjG,EAAAA,GAAAA,EAAQsF,IAAAA,GAAApF,EAAAA,EAAAA,GAAA,kCAIhBgG,EAAMlG,EAAAA,GAAAA,IAAUwF,IAAAA,GAAAtF,EAAAA,EAAAA,GAAA,4G,aClC7B,MAoCA,EApCoCzE,IAK7B,IAL8B,OACnCuJ,EAAM,UACNC,EAAS,WACTC,EAAU,MACV9G,GACD3C,EAEC,OACEU,EAAAA,EAAAA,KAAAuE,EAAAA,SAAA,CAAAtE,SACG4I,IACC7I,EAAAA,EAAAA,KAAC0J,EAAc,CAACtC,QAASA,IAAM2B,GAAW,GAAO9I,UAC/C2F,EAAAA,EAAAA,MAAC+D,EAAY,CAACvC,QAAS4C,GAAKA,EAAEC,kBAAkBhK,SAAA,EAC9CD,EAAAA,EAAAA,KAAC4J,EAAW,CAACnD,KAAK,SAASW,QANjB8C,IAAMnB,GAAW,GAMqB9I,UAC9CD,EAAAA,EAAAA,KAAA,OACEmK,MAAM,6BAENC,KAAK,QACLC,OAAO,eACP1J,YAAY,IACZ2J,cAAc,QACdC,eAAe,QAAOtK,UAEtBD,EAAAA,EAAAA,KAAA,QAAMiB,EAAE,8BAIZjB,EAAAA,EAAAA,KAAC6J,EAAI,CAAA5J,SAAEgC,EAAM+D,YACbhG,EAAAA,EAAAA,KAAC8J,EAAK,CAAA7J,SAAEgC,EAAMiF,cACbjF,EAAMuI,IAAI,KAAMxK,EAAAA,EAAAA,KAAC+J,EAAG,CAACU,IAAKxI,EAAMuI,IAAKE,IAAKzI,EAAM+D,iBAItD,C","sources":["components/Timer/Timer.tsx","../node_modules/react-circular-progressbar/src/Path.tsx","../node_modules/react-circular-progressbar/src/CircularProgressbar.tsx","../node_modules/react-circular-progressbar/src/constants.ts","components/Progressbar/Progressbar.styled.ts","components/Progressbar/Progressbar.tsx","Pages/Tests/Tests.jsx","Pages/Tests/Tests.styled.js","components/Modal/Modal.styled.ts","components/Modal/Modal.tsx"],"sourcesContent":["import React, { useEffect } from 'react';\n\ninterface Time {\n  minutes: number;\n  seconds: number;\n}\n\ninterface TimerProps {\n  time: Time;\n  setTime: React.Dispatch<React.SetStateAction<Time>>;\n}\n\nconst Timer: React.FC<TimerProps> = ({ time, setTime }) => {\n  useEffect(() => {\n    const interval = setInterval(() => {\n      setTime(prevTime => {\n        let seconds = prevTime.seconds + 1;\n        let minutes = prevTime.minutes;\n        if (seconds === 60) {\n          seconds = 0;\n          minutes += 1;\n        }\n        return { minutes, seconds };\n      });\n    }, 1000);\n\n    return () => clearInterval(interval);\n  }, [setTime]);\n\n  return (\n    <div>\n      <h1>{`${time.minutes.toString().padStart(2, '0')}:${time.seconds\n        .toString()\n        .padStart(2, '0')}`}</h1>\n    </div>\n  );\n};\n\nexport default Timer;\n","import * as React from 'react';\nimport { VIEWBOX_CENTER_X, VIEWBOX_CENTER_Y } from './constants';\n\nfunction Path({\n  className,\n  counterClockwise,\n  dashRatio,\n  pathRadius,\n  strokeWidth,\n  style,\n}: {\n  className?: string;\n  counterClockwise: boolean;\n  dashRatio: number;\n  pathRadius: number;\n  strokeWidth: number;\n  style?: object;\n}) {\n  return (\n    <path\n      className={className}\n      style={Object.assign({}, style, getDashStyle({ pathRadius, dashRatio, counterClockwise }))}\n      d={getPathDescription({\n        pathRadius,\n        counterClockwise,\n      })}\n      strokeWidth={strokeWidth}\n      fillOpacity={0}\n    />\n  );\n}\n\n// SVG path description specifies how the path should be drawn\nfunction getPathDescription({\n  pathRadius,\n  counterClockwise,\n}: {\n  pathRadius: number;\n  counterClockwise: boolean;\n}) {\n  const radius = pathRadius;\n  const rotation = counterClockwise ? 1 : 0;\n\n  // Move to center of canvas\n  // Relative move to top canvas\n  // Relative arc to bottom of canvas\n  // Relative arc to top of canvas\n  return `\n      M ${VIEWBOX_CENTER_X},${VIEWBOX_CENTER_Y}\n      m 0,-${radius}\n      a ${radius},${radius} ${rotation} 1 1 0,${2 * radius}\n      a ${radius},${radius} ${rotation} 1 1 0,-${2 * radius}\n    `;\n}\n\nfunction getDashStyle({\n  counterClockwise,\n  dashRatio,\n  pathRadius,\n}: {\n  counterClockwise: boolean;\n  dashRatio: number;\n  pathRadius: number;\n}) {\n  const diameter = Math.PI * 2 * pathRadius;\n  const gapLength = (1 - dashRatio) * diameter;\n\n  return {\n    // Have dash be full diameter, and gap be full diameter\n    strokeDasharray: `${diameter}px ${diameter}px`,\n    // Shift dash backward by gapLength, so gap starts appearing at correct distance\n    strokeDashoffset: `${counterClockwise ? -gapLength : gapLength}px`,\n  };\n}\n\nexport default Path;\n","import * as React from 'react';\n\nimport {\n  VIEWBOX_WIDTH,\n  VIEWBOX_HEIGHT,\n  VIEWBOX_HEIGHT_HALF,\n  VIEWBOX_CENTER_X,\n  VIEWBOX_CENTER_Y,\n} from './constants';\nimport Path from './Path';\nimport { CircularProgressbarDefaultProps, CircularProgressbarProps } from './types';\n\nclass CircularProgressbar extends React.Component<CircularProgressbarProps> {\n  static defaultProps: CircularProgressbarDefaultProps = {\n    background: false,\n    backgroundPadding: 0,\n    circleRatio: 1,\n    classes: {\n      root: 'CircularProgressbar',\n      trail: 'CircularProgressbar-trail',\n      path: 'CircularProgressbar-path',\n      text: 'CircularProgressbar-text',\n      background: 'CircularProgressbar-background',\n    },\n    counterClockwise: false,\n    className: '',\n    maxValue: 100,\n    minValue: 0,\n    strokeWidth: 8,\n    styles: {\n      root: {},\n      trail: {},\n      path: {},\n      text: {},\n      background: {},\n    },\n    text: '',\n  };\n\n  getBackgroundPadding() {\n    if (!this.props.background) {\n      // Don't add padding if not displaying background\n      return 0;\n    }\n    return this.props.backgroundPadding;\n  }\n\n  getPathRadius() {\n    // The radius of the path is defined to be in the middle, so in order for the path to\n    // fit perfectly inside the 100x100 viewBox, need to subtract half the strokeWidth\n    return VIEWBOX_HEIGHT_HALF - this.props.strokeWidth / 2 - this.getBackgroundPadding();\n  }\n\n  // Ratio of path length to trail length, as a value between 0 and 1\n  getPathRatio() {\n    const { value, minValue, maxValue } = this.props;\n    const boundedValue = Math.min(Math.max(value, minValue), maxValue);\n    return (boundedValue - minValue) / (maxValue - minValue);\n  }\n\n  render() {\n    const {\n      circleRatio,\n      className,\n      classes,\n      counterClockwise,\n      styles,\n      strokeWidth,\n      text,\n    } = this.props;\n\n    const pathRadius = this.getPathRadius();\n    const pathRatio = this.getPathRatio();\n\n    return (\n      <svg\n        className={`${classes.root} ${className}`}\n        style={styles.root}\n        viewBox={`0 0 ${VIEWBOX_WIDTH} ${VIEWBOX_HEIGHT}`}\n        data-test-id=\"CircularProgressbar\"\n      >\n        {this.props.background ? (\n          <circle\n            className={classes.background}\n            style={styles.background}\n            cx={VIEWBOX_CENTER_X}\n            cy={VIEWBOX_CENTER_Y}\n            r={VIEWBOX_HEIGHT_HALF}\n          />\n        ) : null}\n\n        <Path\n          className={classes.trail}\n          counterClockwise={counterClockwise}\n          dashRatio={circleRatio}\n          pathRadius={pathRadius}\n          strokeWidth={strokeWidth}\n          style={styles.trail}\n        />\n\n        <Path\n          className={classes.path}\n          counterClockwise={counterClockwise}\n          dashRatio={pathRatio * circleRatio}\n          pathRadius={pathRadius}\n          strokeWidth={strokeWidth}\n          style={styles.path}\n        />\n\n        {text ? (\n          <text\n            className={classes.text}\n            style={styles.text}\n            x={VIEWBOX_CENTER_X}\n            y={VIEWBOX_CENTER_Y}\n          >\n            {text}\n          </text>\n        ) : null}\n      </svg>\n    );\n  }\n}\n\nexport default CircularProgressbar;\n","export const VIEWBOX_WIDTH = 100;\nexport const VIEWBOX_HEIGHT = 100;\nexport const VIEWBOX_HEIGHT_HALF = 50;\nexport const VIEWBOX_CENTER_X = 50;\nexport const VIEWBOX_CENTER_Y = 50;\n","import styled from 'styled-components';\n\nexport const PersentContainer = styled.div`\n  width: 200px;\n  height: 200px;\n  @media screen and (max-width: 1200px) {\n  }\n  // Mobil\n  @media screen and (max-width: 767px) {\n    width: 100px;\n    height: 100px;\n  }\n`;\n","import React from 'react';\nimport { CircularProgressbar } from 'react-circular-progressbar';\nimport 'react-circular-progressbar/dist/styles.css';\nimport { PersentContainer } from './Progressbar.styled';\n\ninterface ProgressbarProps {\n  correctCount: number;\n  questions: number;\n}\n\nexport const Progressbar: React.FC<ProgressbarProps> = props => {\n  const { correctCount, questions } = props;\n  const calculatePersent = () => {\n    return Math.round((correctCount / questions) * 100);\n  };\n  console.log(correctCount, questions);\n  return (\n    <>\n      {/* <p>{calculatePersent()}</p> */}\n      <PersentContainer>\n        <CircularProgressbar\n          value={calculatePersent()}\n          text={`${calculatePersent()}%`}\n        />\n      </PersentContainer>\n    </>\n  );\n};\n","import React, { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport {\n  FormTest,\n  FormText,\n  ContainerCheck,\n  Button,\n  LinkContainer,\n  LinkToPage,\n  AnswerControl,\n  AnswerBlock,\n  Answer,\n  ButtonDescr,\n} from './Tests.styled';\nimport Modal from '../../components/Modal/Modal';\nimport Timer from 'components/Timer/Timer';\nimport { ADD_RIGHTQUESTIONS } from 'store/testsReducer';\nimport { CLEAR_STATE } from 'store/testsReducer';\nimport { Progressbar } from 'components/Progressbar/Progressbar';\n\nconst Tests = () => {\n  const [modalActive, setModalActive] = useState(false);\n  const [currentQuestion, setCurrentQuestion] = useState(0);\n  const [selectedAnswers, setSelectedAnswers] = useState([]);\n  const [correctCount, setCorrectCount] = useState(0);\n  const [count, setCount] = useState(1);\n  const [myCorrectAnswers, setMyCorrectAnswers] = useState([]); // Хранение правильных ответов\n  const [addColor, setAddColor] = useState(false); // Состояние для подсветки правильных ответов\n  const [time, setTime] = useState({ minutes: 0, seconds: 0 }); // состояние таймера\n  // const [persent, setPersent] = useState('0');\n\n  // const calculatePersent = () => {\n  //   return setPersent(\n  //     Math.round((correctCount / questions.length) * 100) + '%'\n  //   );\n  // };\n\n  const dispatch = useDispatch();\n  const questions = useSelector(state => state.tests.questions);\n\n  const handleAnswerSelect = answer => {\n    if (selectedAnswers.includes(answer)) {\n      setSelectedAnswers(\n        selectedAnswers.filter(selected => selected !== answer)\n      );\n    } else {\n      setSelectedAnswers([...selectedAnswers, answer]);\n    }\n  };\n\n  const comparison = () => {\n    setAddColor(prevState => !prevState); // Изменяем состояние для подсветки при каждом нажатии\n  };\n\n  const handleNextQuestion = () => {\n    setAddColor(false);\n    setCount(count + 1);\n\n    let correctAnswersCount = 0;\n\n    questions[currentQuestion].correctAnswers.forEach(correctAnswer => {\n      if (selectedAnswers.includes(correctAnswer)) {\n        setMyCorrectAnswers(prevAnswers => [\n          ...prevAnswers,\n          {\n            topic: questions[currentQuestion].topic,\n            book: questions[currentQuestion].book,\n            answers: questions[currentQuestion].answers,\n            question: questions[currentQuestion].question,\n            correctAnswers: questions[currentQuestion].correctAnswers,\n          },\n        ]);\n        correctAnswersCount++;\n      }\n    });\n\n    setCorrectCount(\n      correctCount +\n        (correctAnswersCount ===\n        questions[currentQuestion].correctAnswers.length\n          ? 1\n          : 0)\n    );\n\n    if (currentQuestion < questions.length - 1) {\n      setCurrentQuestion(currentQuestion + 1);\n    } else {\n      if (count === questions.length) {\n        dispatch(\n          ADD_RIGHTQUESTIONS({\n            myCorrectAnswers,\n          })\n        );\n        // dispatch({\n        //   type: 'ADD_RIGHTQUESTIONS',\n        //   payload: { myCorrectAnswers },\n        // });\n      }\n      // console.log(correctCount);\n      // alert(`Правильных ответов - ${correctCount} из ${questions.length}`);\n    }\n\n    setSelectedAnswers([]);\n  };\n\n  const clearState = () => {\n    dispatch(CLEAR_STATE({}));\n  };\n\n  const openModal = () => {\n    setModalActive(true);\n    document.body.style.overflow = 'hidden';\n  };\n\n  const closeModal = () => {\n    setModalActive(false);\n    document.body.style.overflow = 'auto';\n  };\n\n  // console.log(questions[currentQuestion].description);\n\n  return (\n    <FormTest>\n      <Answer>\n        <FormText>{questions[currentQuestion].question}</FormText>\n        {questions[currentQuestion].answers.map((answer, index) => (\n          <ContainerCheck\n            key={index}\n            style={{\n              backgroundColor:\n                addColor &&\n                questions[currentQuestion].correctAnswers.includes(answer)\n                  ? '#1fa01f6f'\n                  : '',\n            }}\n          >\n            <input\n              type=\"checkbox\"\n              checked={selectedAnswers.includes(answer)}\n              onChange={() => handleAnswerSelect(answer)}\n              style={{ width: '20px', height: '20px' }}\n            />\n            <label>{answer}</label>\n          </ContainerCheck>\n        ))}\n\n        {questions[currentQuestion].book &&\n        questions[currentQuestion].book[0] === 'Klener'\n          ? null\n          : questions[currentQuestion].description &&\n            questions[currentQuestion].description[0] !== '' && (\n              <ButtonDescr onClick={openModal}>Show Description</ButtonDescr>\n            )}\n      </Answer>\n\n      {count <= questions.length ? (\n        <AnswerBlock>\n          <Timer time={time} setTime={setTime} />\n          <AnswerControl>\n            <Button onClick={handleNextQuestion}>Next Question</Button>\n            <span style={{ width: '70px' }}>\n              {count} из {questions.length}\n            </span>\n            <Button onClick={comparison}>Check</Button>\n          </AnswerControl>\n        </AnswerBlock>\n      ) : (\n        <LinkContainer>\n          <Progressbar\n            correctCount={correctCount}\n            questions={questions.length}\n          />\n          {/* <h3>{persent}</h3> */}\n          <h3>{`Correct answers - ${correctCount} из ${questions.length}`}</h3>\n          <h3>{`Testing time ${time.minutes} : ${time.seconds}`}</h3>\n          <LinkToPage to=\"/AnsweredQuestions\">\n            Перейти к разбору тестов\n          </LinkToPage>\n          <LinkToPage onClick={clearState} to=\"/\">\n            На Главную\n          </LinkToPage>\n        </LinkContainer>\n      )}\n      <Modal\n        active={modalActive}\n        setActive={setModalActive}\n        closeModal={closeModal}\n        props={questions[currentQuestion]}\n      />\n    </FormTest>\n  );\n};\n\nexport default Tests;\n","import styled from 'styled-components';\nimport { Link } from 'react-router-dom';\n\n//main container\nexport const FormTest = styled.div`\n  /* background-color: #abaad8; */\n`;\n\nexport const FormText = styled.h2`\n  margin-bottom: 40px;\n`;\n\nexport const ContainerCheck = styled.div`\n  display: flex;\n  align-items: center;\n  gap: 15px;\n  margin-bottom: 20px;\n`;\n\n// Общая кнопка\nexport const Button = styled.button`\n  /* margin-bottom: 15px; */\n  color: black;\n  font-weight: 500;\n  background-color: var(--iq-primary);\n  width: 150px;\n  height: 50px;\n  border-radius: 10px;\n  transition: background-color 0.3s ease;\n  &:active {\n    background: var(--iq-secondary);\n  }\n`;\n\nexport const LinkContainer = styled.div`\n  margin-top: 50px;\n  margin-bottom: 30px;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  gap: 20px;\n`;\n\n// Общая ссылка\nexport const LinkToPage = styled(Link)`\n  border-radius: 4px;\n  text-decoration: none;\n  &:hover {\n    background: var(--iq-primary);\n  }\n`;\n\nexport const AnswerBlock = styled.div`\n  gap: 20px;\n  display: flex;\n  flex-direction: column;\n  justify-content: space-between;\n  align-items: center;\n  /* width: 435px; */\n  margin-bottom: 30px;\n  margin: auto;\n\n  //Tablet\n  @media screen and (max-width: 1200px) {\n    font-size: var(--font-size-tablet);\n  }\n\n  //Mobil\n  @media screen and (max-width: 767px) {\n    font-size: var(--font-size-mobile);\n    display: flex;\n    flex-direction: column;\n    width: 270px;\n    margin-bottom: 200px;\n  }\n`;\n\nexport const AnswerControl = styled.div`\n  /* flex-direction: column; */\n  display: flex;\n  gap: 20px;\n  align-items: center;\n\n  //mobil\n  @media screen and (max-width: 767px) {\n    margin-bottom: 20px;\n    display: flex;\n    flex-direction: column;\n  }\n`;\n\nexport const Answer = styled.div`\n  min-height: 400px;\n  margin-bottom: 20px;\n`;\n\nexport const ButtonDescr = styled.button`\n  color: black;\n  font-weight: 500;\n  background-color: var(--iq-primary);\n  width: 200px;\n  height: 30px;\n  border-radius: 10px;\n  transition: background-color 0.3s ease;\n  display: block;\n  margin: auto;\n`;\n","import styled from 'styled-components';\n\nexport const ModalContainer = styled.div`\n  height: 100vh;\n  width: 100vw;\n  background-color: rgba(0, 0, 0, 0.7);\n  backdrop-filter: blur(5px);\n  position: fixed;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  top: 0;\n  left: 0;\n  overflow: hidden;\n`;\n\nexport const ModalContent = styled.div`\n  position: relative;\n  padding: 60px 15px 30px 15px;\n  border-radius: 12px;\n  background-color: var(--iq-secondary);\n  width: 75%;\n  height: 700px;\n  position: fixed; /* Фиксированная позиция */\n  overflow: auto; /* Разрешить прокрутку при необходимости */\n  @media screen and (max-width: 767px) {\n    padding: 60px 30px 30px 30px;\n    height: 550px;\n  }\n`;\n\nexport const SvgCloseBtn = styled.button`\n  position: absolute;\n  background: transparent;\n  border: none;\n  right: 14px;\n  top: 14px;\n  cursor: pointer;\n\n  svg {\n    stroke-width: 1.5px;\n    stroke: var(--iq-cross);\n    width: 20px;\n    height: 20px;\n  }\n`;\n\nexport const Text = styled.h2`\n  text-align: center;\n  margin-bottom: 15px;\n`;\n\nexport const Descr = styled.p`\n  margin-bottom: 40px;\n`;\n\nexport const Img = styled.img`\n  // Mobil\n  @media screen and (max-width: 767px) {\n    width: 235px;\n    height: 170px;\n  }\n`;\n","import React from 'react';\n\nimport {\n  Descr,\n  ModalContainer,\n  ModalContent,\n  SvgCloseBtn,\n  Text,\n  Img,\n} from './Modal.styled';\n\ninterface ModalProps {\n  active: boolean;\n  setActive: (active: boolean) => void;\n  closeModal: (active: boolean) => void;\n  props: {\n    question: string;\n    description: string;\n    img: string;\n  };\n}\n\nconst Modal: React.FC<ModalProps> = ({\n  active,\n  setActive,\n  closeModal,\n  props,\n}) => {\n  const handleClose = () => closeModal(false);\n  return (\n    <>\n      {active && (\n        <ModalContainer onClick={() => closeModal(false)}>\n          <ModalContent onClick={e => e.stopPropagation()}>\n            <SvgCloseBtn type=\"button\" onClick={handleClose}>\n              <svg\n                xmlns=\"http://www.w3.org/2000/svg\"\n                // viewBox=\"0 0 24 24\"\n                fill=\"black\"\n                stroke=\"currentColor\"\n                strokeWidth=\"2\"\n                strokeLinecap=\"round\"\n                strokeLinejoin=\"round\"\n              >\n                <path d=\"M6 18L18 6M6 6l12 12\" />\n              </svg>\n            </SvgCloseBtn>\n\n            <Text>{props.question}</Text>\n            <Descr>{props.description}</Descr>\n            {props.img[0] && <Img src={props.img} alt={props.question} />}\n          </ModalContent>\n        </ModalContainer>\n      )}\n    </>\n  );\n};\n\nexport default Modal;\n"],"names":["_ref","time","setTime","useEffect","interval","setInterval","prevTime","seconds","minutes","clearInterval","_jsx","children","concat","toString","padStart","Path","_a","className","counterClockwise","dashRatio","pathRadius","strokeWidth","style","createElement","Object","assign","getDashStyle","d","getPathDescription","fillOpacity","rotation","diameter","Math","PI","gapLength","strokeDasharray","strokeDashoffset","CircularProgressbar","_super","__extends","prototype","getBackgroundPadding","this","props","background","backgroundPadding","getPathRadius","getPathRatio","value","minValue","maxValue","min","max","render","circleRatio","classes","styles","text","pathRatio","root","viewBox","cx","cy","r","trail","path","x","y","defaultProps","Component","PersentContainer","styled","_templateObject","_taggedTemplateLiteral","Progressbar","correctCount","questions","calculatePersent","round","console","log","_Fragment","Tests","modalActive","setModalActive","useState","currentQuestion","setCurrentQuestion","selectedAnswers","setSelectedAnswers","setCorrectCount","count","setCount","myCorrectAnswers","setMyCorrectAnswers","addColor","setAddColor","dispatch","useDispatch","useSelector","state","tests","_jsxs","FormTest","Answer","FormText","question","answers","map","answer","index","ContainerCheck","backgroundColor","correctAnswers","includes","type","checked","onChange","filter","selected","handleAnswerSelect","width","height","book","description","ButtonDescr","onClick","openModal","document","body","overflow","length","AnswerBlock","Timer","AnswerControl","Button","handleNextQuestion","correctAnswersCount","forEach","correctAnswer","prevAnswers","topic","ADD_RIGHTQUESTIONS","comparison","prevState","LinkContainer","LinkToPage","to","clearState","CLEAR_STATE","Modal","active","setActive","closeModal","_templateObject2","_templateObject3","_templateObject4","_templateObject5","Link","_templateObject6","_templateObject7","_templateObject8","_templateObject9","_templateObject10","ModalContainer","ModalContent","SvgCloseBtn","Text","Descr","Img","e","stopPropagation","handleClose","xmlns","fill","stroke","strokeLinecap","strokeLinejoin","img","src","alt"],"sourceRoot":""}