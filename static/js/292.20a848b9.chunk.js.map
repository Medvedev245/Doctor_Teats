{"version":3,"file":"static/js/292.20a848b9.chunk.js","mappings":"sNAGO,MAAMA,EAAWC,EAAAA,GAAAA,GAASC,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,8EAMpBC,EAAWH,EAAAA,GAAAA,EAAQI,IAAAA,GAAAF,EAAAA,EAAAA,GAAA,mJASnBG,EAAYL,EAAAA,GAAAA,IAAUM,IAAAA,GAAAJ,EAAAA,EAAAA,GAAA,sFAMtBK,EAAWP,EAAAA,GAAAA,EAAQQ,IAAAA,GAAAN,EAAAA,EAAAA,GAAA,uDAKnBO,EAAOT,EAAAA,GAAAA,GAASU,IAAAA,GAAAR,EAAAA,EAAAA,GAAA,8JAUhBS,EAAOX,EAAAA,GAAAA,GAASY,IAAAA,GAAAV,EAAAA,EAAAA,GAAA,iEAMhBW,EAAUb,EAAAA,GAAAA,IAAUc,IAAAA,GAAAZ,EAAAA,EAAAA,GAAA,kCAIpBa,EAASf,EAAAA,GAAAA,IAAUgB,IAAAA,GAAAd,EAAAA,EAAAA,GAAA,kCAInBe,GAAajB,EAAAA,EAAAA,IAAOkB,EAAAA,GAAPlB,CAAYmB,IAAAA,GAAAjB,EAAAA,EAAAA,GAAA,uM,uBCpCtC,MA0EA,EA1EoCkB,KAClC,MAAMC,GAAcC,EAAAA,EAAAA,KAAaC,GAAqBA,EAAMC,MAAMC,YAC5DC,GAAgBJ,EAAAA,EAAAA,KACnBC,GAAqBA,EAAMC,MAAMG,eAEpCC,QAAQC,IAAIR,EAAaK,GACzB,MAAMI,GAAWC,EAAAA,EAAAA,MAEXC,EAAmBX,EAAYY,KAAKC,IACxC,MAAMC,EAAiBD,EAASE,QAAQH,KAAKI,GACvCH,EAASI,eAAeC,SAASF,GAC7B,GAANG,OAAUH,EAAM,sBAETA,IAIX,MAAO,IACFH,EACHE,QAASD,EACV,IAOGM,EAAmBP,GAChBR,EAAcgB,MAClBC,GAAgBA,EAAOT,WAAaA,EAASA,WAIlD,OACEU,EAAAA,EAAAA,MAAA,OAAAC,SAAA,EACED,EAAAA,EAAAA,MAAC7C,EAAQ,CAAA8C,SAAA,CAAC,oBACQC,EAAAA,EAAAA,KAAA,SAAM,IAAEpB,EAAcqB,OAAO,UAAQ,IACpD1B,EAAY0B,WAEfD,EAAAA,EAAAA,KAAC3C,EAAQ,CAAA0C,SAAC,0EACVC,EAAAA,EAAAA,KAAC3C,EAAQ,CAAA0C,SAAC,kFACVC,EAAAA,EAAAA,KAACrC,EAAI,CAAAoC,SACFb,EAAiBC,KAAI,CAACC,EAAUc,KAC/BJ,EAAAA,EAAAA,MAACjC,EAAI,CAEHsC,MAAO,CACLC,gBAAiBT,EAAgBP,GAC7B,aACA,SACJW,SAAA,EAEFD,EAAAA,EAAAA,MAACvC,EAAS,CAAAwC,SAAA,EACRD,EAAAA,EAAAA,MAAA,QAAAC,SAAA,CAAM,6BAAOX,EAASiB,SACtBP,EAAAA,EAAAA,MAAA,QAAAC,SAAA,CAAM,6BAAOX,EAASkB,aAGxBN,EAAAA,EAAAA,KAACvC,EAAQ,CAAAsC,SAAEX,EAASA,YACpBY,EAAAA,EAAAA,KAACjC,EAAO,CAAAgC,SACLX,EAASE,QAAQH,KAAI,CAACI,EAAQW,KAC7BJ,EAAAA,EAAAA,MAAC7B,EAAM,CAAA8B,SAAA,CACJG,EAAQ,EAAE,MAAIX,IADJW,SAfZA,QAuBXF,EAAAA,EAAAA,KAAC7B,EAAU,CAACoC,QA5CGC,KACjBxB,GAASyB,EAAAA,EAAAA,MAAc,EA2CYC,GAAG,IAAGX,SAAC,8DAGpC,C","sources":["Pages/AnsweredQuestions/AnsweredQuestions.styled.ts","Pages/AnsweredQuestions/AnsweredQuestions.tsx"],"sourcesContent":["import styled from 'styled-components';\nimport { Link } from 'react-router-dom';\n\nexport const TextPage = styled.h2`\n  font-weight: 700;\n  margin-bottom: 20px;\n  text-align: center;\n`;\n\nexport const TextSpan = styled.p`\n  font-weight: 500;\n  margin-bottom: 15px;\n  text-align: center;\n  @media screen and (max-width: 767px) {\n    font-size: 12px;\n  }\n`;\n\nexport const TopicList = styled.div`\n  display: flex;\n  justify-content: space-around;\n  margin-bottom: 15px;\n`;\n\nexport const Question = styled.p`\n  margin-bottom: 10px;\n  font-weight: 700;\n`;\n\nexport const List = styled.ul`\n  display: flex;\n  justify-content: center;\n  flex-wrap: wrap;\n  list-style: none;\n  gap: 20px;\n  padding-top: 40px;\n  padding-bottom: 40px;\n`;\n\nexport const Item = styled.li`\n  font-size: 15px;\n  width: 400px;\n  padding: 15px;\n`;\n\nexport const Answers = styled.div`\n  /* padding: 15px; */\n`;\n\nexport const Answer = styled.div`\n  margin-bottom: 10px;\n`;\n\nexport const LinkToPage = styled(Link)`\n  border-radius: 4px;\n  text-decoration: none;\n  text-align: center;\n  display: flex;\n  justify-content: center;\n  margin-bottom: 20px;\n  &:hover,\n  &:focus {\n    color: red;\n  }\n`;\n","import React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport {\n  List,\n  TextPage,\n  Item,\n  Answers,\n  Answer,\n  TopicList,\n  Question,\n  TextSpan,\n  LinkToPage,\n} from './AnsweredQuestions.styled';\nimport { CLEAR_STATE } from 'store/testsReducer';\nimport { Test } from 'Pages/AllTests/AllTests';\nimport { RootState } from 'store';\n\nconst AnsweredQuestions: React.FC = () => {\n  const allQuestion = useSelector((state: RootState) => state.tests.questions);\n  const rightQuestion = useSelector(\n    (state: RootState) => state.tests.rightAnswers\n  );\n  console.log(allQuestion, rightQuestion);\n  const dispatch = useDispatch();\n\n  const updatedQuestions = allQuestion.map((question: Test) => {\n    const updatedAnswers = question.answers.map((answer: string) => {\n      if (question.correctAnswers.includes(answer)) {\n        return `${answer} (Správně)`;\n      } else {\n        return answer;\n      }\n    });\n\n    return {\n      ...question,\n      answers: updatedAnswers,\n    };\n  });\n\n  const clearState = () => {\n    dispatch(CLEAR_STATE());\n  };\n\n  const isRightQuestion = (question: Test) => {\n    return rightQuestion.some(\n      (rightQ: any) => rightQ.question === question.question\n    );\n  };\n\n  return (\n    <div>\n      <TextPage>\n        Correct answers <br /> {rightQuestion.length} out of{' '}\n        {allQuestion.length}\n      </TextPage>\n      <TextSpan>Vaše správné odpovědi jsou označeny zeleně</TextSpan>\n      <TextSpan>Správná odpověď v testu je označena - (Správně)</TextSpan>\n      <List>\n        {updatedQuestions.map((question, index) => (\n          <Item\n            key={index}\n            style={{\n              backgroundColor: isRightQuestion(question)\n                ? 'lightgreen'\n                : 'white',\n            }}\n          >\n            <TopicList>\n              <span>База: {question.book}</span>\n              <span>Тема: {question.topic}</span>\n            </TopicList>\n\n            <Question>{question.question}</Question>\n            <Answers>\n              {question.answers.map((answer, index) => (\n                <Answer key={index}>\n                  {index + 1} - {answer}\n                </Answer>\n              ))}\n            </Answers>\n          </Item>\n        ))}\n      </List>\n      <LinkToPage onClick={clearState} to=\"/\">\n        На Главную\n      </LinkToPage>\n    </div>\n  );\n};\n\nexport default AnsweredQuestions;\n"],"names":["TextPage","styled","_templateObject","_taggedTemplateLiteral","TextSpan","_templateObject2","TopicList","_templateObject3","Question","_templateObject4","List","_templateObject5","Item","_templateObject6","Answers","_templateObject7","Answer","_templateObject8","LinkToPage","Link","_templateObject9","AnsweredQuestions","allQuestion","useSelector","state","tests","questions","rightQuestion","rightAnswers","console","log","dispatch","useDispatch","updatedQuestions","map","question","updatedAnswers","answers","answer","correctAnswers","includes","concat","isRightQuestion","some","rightQ","_jsxs","children","_jsx","length","index","style","backgroundColor","book","topic","onClick","clearState","CLEAR_STATE","to"],"sourceRoot":""}