const Functions = () => {
  // –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏
  const text = `
  71. Dƒõti diabetick√Ωch matek nejƒçastƒõji posti≈æeny: üòä 
  - herniemi
  - m. Down
  + syndromem kaud√°ln√≠ regrese ‚úÖ
  - teratomy
  

  72. U jak√© komplikace u pacienta s diabetes mellitus II typu bude poru≈°en√≠ testu tolerance k gluk√≥ze? 
  + chronick√° ren√°ln√≠ insuficience ‚úÖ
  - progrese srdeƒçn√≠ insuficience
  - inzulinom
  - hypotyre√≥za
  + hyperkortisolismus ‚úÖ
  

  73. Diabetes insipidus centralis: üòä - –≠–ù–î–û–ö–†–ò–ù–û–õ–û–ì–ò–Ø
  + nedostatek antidiuretick√©ho hormonu (vazopresin) ‚úÖ
  - necitlivost ledvinov√© tk√°nƒõ na vazopresin
  

  
  74. Centr√°ln√≠ diabetes insipidus je p≈Øsoben (Klener)  - –≠–ù–î–û–ö–†–ò–ù–û–õ–û–ì–ò–Ø
  - poruchou sekrece aldosteronu
  - necitlivost√≠ ledvin na vazopresin 
  + deficitem vazopresinu ‚úÖ
  - prim√°rn√≠ polydipsi√≠
  

  
  75. Nefrogenn√≠ diabetes insipidus pat≈ô√≠ mezi (Klener) - - –≠–ù–î–û–ö–†–ò–ù–û–õ–û–ì–ò–Ø
  
  - centr√°ln√≠ hypokortikalismy 
  - perifern√≠ hypokortikalismy 
  + receptorov√© nemoci ‚úÖ
  - psychosomatick√© nemoci
  

  
  76. Diabetick√° nefropatie (Klener) - –≠–ù–î–û–ö–†–ò–ù–û–õ–û–ì–ò–Ø
  - se vyskytuje po cca 5 letech asi u 90 % diabetik≈Ø 2. typu
  - je kontraindikac√≠ za≈ôazen√≠ do dialyzaƒçn√≠ho programu
  - je indikov√°na k ƒçasn√© imunosupres√≠vn√≠ terapii
  + se vyskytuje po cca 15 letech asi u 40 % diabetik≈Ø 1 typu ‚úÖ
  

  77. Ren√°ln√≠ biopsie u pacienta s 15letou anamn√©zou diabetu, proteinuri√≠ a diabetickou retinopati√≠ (Klener) - –≠–ù–î–û–ö–†–ò–ù–û–õ–û–ì–ò–Ø
  - je nezbytn√° k posouzen√≠ indikace imunosupres√≠vn√≠ terapie
  - je indikov√°na u v≈°ech pacient≈Ø s nefrotick√Ωm syndromem, diabetick√° nefropatie toti≈æ nikdy k nefrotick√©mu syndromu nevede
  + nen√≠ nutn√°, jde-li o izolovanou proteinurii (bez hematurie), diagn√≥za diabetick√© nefropatie je v takov√©m p≈ô√≠pade pravdƒõpodobn√° ‚úÖ
  - nen√≠ nutn√° v tƒõch p≈ô√≠padech, kdy je proteinurie prov√°zen erytrocyturi√≠ glomerul√°rn√≠ho p≈Øvodu
  

  78. Diabetick√° nefropatie (Klener)- –≠–ù–î–û–ö–†–ò–ù–û–õ–û–ì–ò–Ø
  - vznik√° pouze u pacient≈Ø, u kter√Ωch se rann√≠ glyk√©mie ƒçasto dost√°vaj√≠ nad 15 mmol/l 
  - je obvykle p≈ô√≠tomna ji≈æ v dobƒõ diagn√≥zy diabetu
  + v≈°echny uveden√© mo≈ænosti NEJSOU spr√°vn√© ‚úÖ
  - je obvyklou komplikac√≠ u tƒõch diabetik≈Ø, kte≈ô√≠ jsou l√©ƒçeni peror√°ln√≠mi antidiabetiky

  
  79. P≈ôi l√©ƒçbƒõ diabetu NEm≈Ø≈æe doj√≠t k hypoglyk√©mi√≠m po (Klener) - –≠–ù–î–û–ö–†–ò–ù–û–õ–û–ì–ò–Ø
  - inzulinu
  + biguanidech ‚úÖ *(metforminu) 
  - kombinovan√© terapii inzulinem a peror√°ln√≠mi antidiabetiky 
  - sulfonylmoƒçovinov√Ωch antidiabetic√≠ch
  

  
  80. Diabetick√° neuroangiopatie s ≈æiln√≠ insuficienc√≠, komplikace? üòä - –≠–ù–î–û–ö–†–ò–ù–û–õ–û–ì–ò–Ø
  
  + rozr≈Østaj√≠c√≠ v≈ôedy na m√≠stech nejvƒõt≈°√≠ho tlaku ‚úÖ
  

  `;

  //Legislativa

  function parseTextToQuestions(text) {
    const questions = [];

    // –†–∞–∑–¥–µ–ª—è–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω—ã–µ –±–ª–æ–∫–∏ –≤–æ–ø—Ä–æ—Å–æ–≤
    const questionBlocks = text.split(/\n\n/);

    // –ü—Ä–æ—Ö–æ–¥–∏–º—Å—è –ø–æ –∫–∞–∂–¥–æ–º—É –±–ª–æ–∫—É
    questionBlocks.forEach(block => {
      // –ò—â–µ–º –Ω–æ–º–µ—Ä –≤–æ–ø—Ä–æ—Å–∞ –∏ —Å–∞–º –≤–æ–ø—Ä–æ—Å
      const questionMatch = block.match(/^\s*(\d+\..+?)\n/);
      if (questionMatch) {
        const question = questionMatch[1].trim();
        const questionObj = {
          question: question,
          answers: [],
          book: ['Base_2023_medicine'],
          topic: ['Base_2023_medicine'],
          correctAnswers: [],
          description: [''],
          img: [''],
        };

        // –ò—â–µ–º –æ—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ø—Ä–æ—Å
        const answerMatches = block.match(/^\s*([+-].+?)\s*(?:‚úÖ)?$/gm);
        if (answerMatches) {
          answerMatches.forEach(answerMatch => {
            const trimmedAnswer = answerMatch.trim();
            questionObj.answers.push(trimmedAnswer);
            if (trimmedAnswer.startsWith('+')) {
              questionObj.correctAnswers.push(trimmedAnswer);
            }
          });
        }

        questions.push(questionObj);
      }
    });
    console.log(questions);
    return questions;
  }

  const result = parseTextToQuestions(text);
  console.log(result);

  //KLENER - 1 –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤–æ–ø—Ä–æ—Å –∏ –æ—Ç–≤–µ—Ç—ã —Å–Ω–∞—á–∞–ª–∞ –ø–æ–º–µ–Ω—è—Ç—å –Ω–∞ }{
  //   const parseText = text => {
  //     return text[0]
  //       .split(/\d+\.\d+\. /)
  //       .filter(item => item.trim())
  //       .map(item => {
  //         const [question, ...options] = item
  //           .split('\n')
  //           .map(line => line.trim());
  //         const optionsArray = options.map(option => option.trim());
  //         const newText = optionsArray
  //           .map(el => el.split(')').slice(1).join(')').trim())
  //           .filter(text => text !== ''); // –§–∏–ª—å—Ç—Ä—É–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏;
  //         // console.log(newText);
  //         const answers = optionsArray.filter(elem => elem.includes('}{'));
  //         // console.log(answers);

  //         const newAnswers = answers.map(el => el.replace(/^A}\{[a-z]\)\s*/, ''));
  //         console.log(newAnswers);

  //         return {
  //           question,
  //           answers: newText,
  //           book: ['Klener'], // –ü—Ä–∏–º–µ—Ä –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—è "book"
  //           topic: ['Geriartrie'], // –ü—Ä–∏–º–µ—Ä –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—è "topic"
  //           correctAnswers: newAnswers, // –ú–∞—Å—Å–∏–≤ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –æ—Ç–≤–µ—Ç–∞–º–∏
  //         };
  //       });
  //   };

  return (
    <div>
      {result.length > 0 && (
        <ul>
          {result.map((el, index) => (
            <li key={index} style={{ listStyle: 'none' }}>
              <div>
                {'{'}"question": "{el.question}",
              </div>

              <div>
                "answers": [
                {el.answers.map(el => (
                  <div>"{el}",</div>
                ))}
                ],
              </div>
              <div>"book": ["{el.book}"],</div>
              <div>"topic": ["{el.topic}"],</div>
              <div>
                "correctAnswers": ["{el.correctAnswers.join('", "')}"]{','}
              </div>
              <div>"description": ["{el.description}"],</div>
              <div>
                <img src={el.img} alt="" />
                "img": ["{el.img}"]{'},'}
              </div>
              <br />
            </li>
          ))}
        </ul>
      )}
    </div>
  );
};

export default Functions;
